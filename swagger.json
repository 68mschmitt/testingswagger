{
  "x-generator": "NSwag v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "NCR Aloha POS API",
    "description": "This API is designed for both internal and external integrations with [NCR Aloha POS](https://www.ncr.com/restaurants/aloha-pos).<br/><br/>API service build version: `20.17.2.71`",
    "version": "20.17.0"
  },
  "paths": {
    "/aloha-ui/employee-log-in": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /employees/login endpoint",
        "operationId": "AlohaUI_EmployeeLogIn",
        "requestBody": {
          "x-name": "loginRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogInRequestData"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResponseData"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/employee-log-out": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /employees/current/logout endpoint",
        "operationId": "AlohaUI_EmployeeLogOut",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/heartbeat": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /employees/current/renew-login endpoint",
        "operationId": "AlohaUI_HeartBeat",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/tables": {
      "get": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /table endpoint",
        "operationId": "AlohaUI_GetTables",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTablesResponseData"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/check-presenter/login": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /employees/switch-to-check-presenter endpoint",
        "operationId": "AlohaUI_BeginCheckPresenter",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "requestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckPresenterRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckPresenterResponseData"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/check-presenter/logout": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /employees/logout-check-presenter endpoint",
        "operationId": "AlohaUI_EndCheckPresenter",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "requestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndCheckPresenterData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/payments": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /checks/{check-id}/payments endpoint",
        "operationId": "AlohaUI_CreatePayment",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "paymentRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NcpPaymentRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseData"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/payments/{id}/authorization": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /checks/{check-id}/payments/{payment-id}/authorize endpoint",
        "operationId": "AlohaUI_AuthorizePayment",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "paymentAuthorization",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NcpPaymentAuthorizationRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/receipts/print": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /checks/print endpoint",
        "operationId": "AlohaUI_PrintReceipt",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "printRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrintReceiptRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/receipts/sms": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /checks/{check-id}/sms-receipt endpoint",
        "operationId": "AlohaUI_SendSmsReceipt",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "smsSendRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmsReceiptRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/aloha-ui/receipts/email": {
      "post": {
        "tags": [
          "AlohaUI"
        ],
        "description": "Aloha-ui is obsolete, please use /checks/{check-id}/email-receipt endpoint",
        "operationId": "AlohaUI_SendEmailReceipt",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "emailReceiptRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailReceiptRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks": {
      "get": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_GetAllChecks",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "isClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "tableId",
            "in": "query",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_CreateCheck",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "check",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckCreateData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}": {
      "get": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_GetCheckById",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/close": {
      "post": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_CloseCheck",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "closeData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloseCheckData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/check-items": {
      "get": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_GetAllItemsFromCheckById",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckItemViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_CreateItemOnCheck",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "check",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckItemCreateData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_DeleteItemsFromCheck",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "deleteItems",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckItemsDeleteData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/check-items/delete": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_RemoveItemsFromCheck",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "deleteItems",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckItemsDeleteData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/check-gift-card-items": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_CreateGiftCardItemOnCheck",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "requestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckGiftCardItemCreateData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/order-by-quantity": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Add selected items to the check as many times as is specified.",
        "operationId": "Check_OrderByQuantity",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "repeatedItems",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderByQuantityData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Updated check with failed entries and failure descriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewAndFailedItemsData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/check-items/{check-item-id}/modifiers": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Creates a new modifier (with subtree of modifiers) and appends it to the current list of modifiers of a check item.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_CreateCheckItemModifier",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "check-item-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "modifierToCreate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierCreateData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "updated check",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/check-items/{check-item-id}/modifiers/{modifier-id}": {
      "put": {
        "tags": [
          "Check"
        ],
        "summary": "Replaces the modifier on check. NOT implemented yet.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_ReplaceCheckItemModifier",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "check-item-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "name": "modifier-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "modifierToCreate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierCreateData"
              }
            }
          },
          "required": true,
          "x-position": 5
        },
        "responses": {
          "200": {
            "description": "updated check",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/check-items/{check-item-id}/modifiers/{modifier-id}/delete": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Deletes the modifier and all of its children from the check.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_DeleteCheckItemModifier",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "check-item-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          },
          {
            "name": "modifier-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "modifierToDelete",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierDeleteData"
              }
            }
          },
          "required": true,
          "x-position": 5
        },
        "responses": {
          "200": {
            "description": "updated check",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/check-items/{check-item-id}/modifiers/batch-replace": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Replaces check item modifers with a new list of modifiers. \nIf the command fails, the state of the check will be unchanged.\nRefill modifer is NOT supported.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_ReplaceAllCheckItemModifiers",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "check-item-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "modifiersToReplace",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierBatchReplaceData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "updated check",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/print": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Print multiple checks on default or a specified printer.",
        "operationId": "Check_PrintChecks",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "printRequest",
          "description": "Print request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrintChecksRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/payments": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_CreatePayment",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "paymentRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/payments/{payment-id}/authorize": {
      "post": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_AuthorizePayment",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "payment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "paymentRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAuthorizationRequestData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/payments/{payment-id}/delete": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_DeletePayment",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "payment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "paymentRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentDeleteRequestData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/gift-card-payments": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_CreateGiftCardPayment",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "paymentRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GiftCardPaymentRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/gift-card-payments/{payment-id}/delete": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_DeleteGiftCardPayment",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "payment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "paymentRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteGiftCardPaymentRequestData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/payments/pre-auth": {
      "post": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_PreAuth",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "preAuthData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentPreAuthData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/payments/{payment-id}/increase-auth": {
      "post": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_IncreaseAuth",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "payment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "increaseAuthData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentIncreaseAuthData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/payments/{payment-id}/close-auth": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_CloseAuth",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "payment-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "closeAuthData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCloseAuthData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/get-tender-default-amount/{tender-id}": {
      "get": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_GetTenderDefaultAmount",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "tender-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenderDefaultAmountData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/set-guest-count": {
      "post": {
        "tags": [
          "Check"
        ],
        "operationId": "Check_SetGuestCount",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "guestCountData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuestCountData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/applied-amount-gratuities": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Sets fixed amount of gratuity",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_SetAmountGratuity",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "gratuityRequestData",
          "description": "Provides gratuity id and gratuity amount",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GratuityRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/applied-percent-gratuities": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Sets gratuity as percentage from check's balance",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_SetPercentageGratuity",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "gratuityRequestData",
          "description": "Provides gratuity id and gratuity percentage",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GratuityRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/applied-amount-gratuities/{gratuity-id}/delete": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Removes fixed amount gratuity from check for the specified gratuity id",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_DeleteAmountGratuity",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "gratuity-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "jitApproval",
          "description": "Optional jit approval",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JitApprovalData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/applied-percent-gratuities/{gratuity-id}/delete": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Removes percentage gratuity from check for the specified gratuity id",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_DeletePercentageGratuity",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "gratuity-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "jitApproval",
          "description": "Optional jit approval",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JitApprovalData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/sms-receipt": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Sends a SMS of a specified receipt.",
        "operationId": "Check_SendSms",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "sendSmsRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendSmsRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/email-receipt": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Sends an email of a specified receipt.",
        "operationId": "Check_SendEmail",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "emailRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/hold-items": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Holds the specified entries. Holding means entries are not ordered, but \nitems are reserved and item availability is decreased accordingly (if configured).",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_HoldItems",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "holdItemsData",
          "description": "Check items to be held.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoldItemsData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/apply-comp": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Applies a comp to the check.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_ApplyComp",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "compData",
          "description": "Comp to be applied.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompApplyData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/comps/{comp-id}/delete": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Deletes applied comp from the check.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_RemoveComp",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "comp-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "compDeleteData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompDeleteData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/comp/delete": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Removes comps from a check",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_RemoveComps",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "removeCompData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveCompData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/apply-promo": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Applies promo to the list of selected items on check or the whole check.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_ApplyPromo",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "promoApplyData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoApplyData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/promos/discountable-items": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_PromoDiscountableItems",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "promoDiscountableItemsData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoDiscountableItemsData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoDiscountableItems"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/promos/required-groups": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_PromoRequiredGroups",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "promoDiscountableItemsData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoDiscountableItemsData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromoRequiredItems"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/promos/{promo-id}/delete": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Delete applied promo from check.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_DeletePromo",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "promo-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "promoDeleteData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoDeleteData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/apply-package-promo": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_PromoAddPackage",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "promoAddPackageData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackagePromoApplyData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/checks/{check-id}/promos/{promo-id}/delete-package-promo": {
      "post": {
        "tags": [
          "Check"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Check_PromoDeletePackage",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "check-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "promo-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "promoDeletePackageData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackagePromoDeleteData"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/comps/current": {
      "get": {
        "tags": [
          "Comp"
        ],
        "summary": "List of currently active comps.",
        "operationId": "Comp_GetActiveComps",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompDefinition"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/devices/{deviceId}": {
      "get": {
        "tags": [
          "Device"
        ],
        "operationId": "Device_Get",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/devices/log-entries/{deviceId}": {
      "post": {
        "tags": [
          "Device"
        ],
        "operationId": "Device_LogEntry",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntryData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/employees/login": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Log in employee using their CFC employee ID and password.",
        "operationId": "Employee_LogIn",
        "requestBody": {
          "x-name": "loginRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogInRequestData"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogInResponseData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/logout": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Log out currently logged in employee.",
        "operationId": "Employee_LogOut",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/renew-login": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Renew currently logged in employee login session to keep it from expiring and logging out the employee automatically.",
        "operationId": "Employee_RenewLogin",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/validate-credentials": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Validate employees credentials for given employee ID.",
        "operationId": "Employee_ValidateCredentials",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "employeeCredentialsData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobCodeData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/switch-to-check-presenter": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Change current log in session to a restricted payments session for pay at table scenarios.\nLogs out the employee and returns a new session token for the restricted session.",
        "operationId": "Employee_SwitchToCheckPresenter",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "requestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckPresenterRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTokenData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/logout-check-presenter": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Log out current restricted pay at table session.",
        "operationId": "Employee_LogoutCheckPresenter",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "requestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndCheckPresenterData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/clock-in": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Clock in currently logged in employee, starting a new shift for them.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Employee_ClockIn",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "requestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClockInRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/clock-out": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Clock out currently logged in employee,closing their current shift.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Employee_ClockOut",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "clockOutRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClockOutRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/{employeeId}/clock-out": {
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Delete the last clock out of another employee which reopens their last shift.\nManager operation, may require manager job code configuration.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Employee_DeleteClockOut",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "deleteClockOutRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteClockOutRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/{employeeId}/clock-out/delete": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Delete the last clock out of another employee which reopens their last shift.\nManager operation, may require manager job code configuration.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Employee_RemoveClockOut",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "deleteClockOutRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteClockOutRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/break-in": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Begin a break in currently logged in employee's current shift.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Employee_BreakIn",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "breakInRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BreakInRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/break-out": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "End current break for the currently logged in employee.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Employee_BreakOut",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "breakOutRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BreakOutRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/pending-messages": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Read a list of pending messages that need to be acknowledged by currently logged in employee before they can clock in.",
        "operationId": "Employee_GetPendingClockInMessages",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "requestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PendingClockInMessagesRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClockInMessageData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/pending-messages/acknowledge": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Acknowledge identified pending messages for currently logged in employee.",
        "operationId": "Employee_AcknowledgeClockInMessages",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "acknowledgeRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcknowledgeClockInRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/current/configuration": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get configuration for the current logged in employee.",
        "operationId": "Employee_GetConfiguration",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "List of employees. Supports filtering results using query parameters.",
        "operationId": "Employee_GetAllEmployees",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "isClockedIn",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "isTerminated",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/employees/{employee-id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get employee by id.",
        "operationId": "Employee_GetEmployeeById",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "employee-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/floor-plan": {
      "get": {
        "tags": [
          "FloorPlan"
        ],
        "summary": "Gets a floor plan.",
        "operationId": "FloorPlan_GetFloorPlan",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FloorPlanViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/gratuities": {
      "get": {
        "tags": [
          "Gratuity"
        ],
        "summary": "Gets available gratuities for current check",
        "operationId": "Gratuity_GetAllGratuities",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GratuityConfigurationData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/menus/current": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Current menu for logged in employee.\nCache using ETag and Cache-Control response headers.",
        "operationId": "Menu_GetCurrentMenu",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "description": "Session token of current employee",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Etag value",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/menus/sales-items/{id}": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Sales item by Id",
        "operationId": "Menu_GetSalesItemById",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Id of sales item",
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Etag value",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesItemData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/menus/sales-items": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "All available sales items.\nCache using ETag and Cache-Control response headers.",
        "operationId": "Menu_GetAllSalesItems",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Etag value",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales items collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesItemData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/menus/modifier-groups": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "All available modifier groups.\nCache using ETag and Cache-Control response headers.",
        "operationId": "Menu_GetAllModifierGroups",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Etag value",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Modifier groups collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModifierGroupData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          },
          "304": {
            "description": "Not Modified"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/order-modes": {
      "get": {
        "tags": [
          "OrderMode"
        ],
        "operationId": "OrderMode_GetAllOrderModes",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderModeViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/panels": {
      "get": {
        "tags": [
          "Panel"
        ],
        "summary": "Gets a list of panels.",
        "operationId": "Panel_GetPanels",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PanelViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/printers": {
      "get": {
        "tags": [
          "Printer"
        ],
        "summary": "Gets all printers",
        "operationId": "Printer_GetPrinters",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrinterViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/promos/current": {
      "get": {
        "tags": [
          "Promo"
        ],
        "summary": "List of currently active promos.",
        "operationId": "Promo_GetActivePromos",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PromoViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/splits": {
      "post": {
        "tags": [
          "Split"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Split_CreateSplitContext",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "createSplitContextRequestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSplitContextRequestData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSplitContextResponseData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/splits/{split-context-id}/save": {
      "post": {
        "tags": [
          "Split"
        ],
        "operationId": "Split_CommitSplitContext",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "split-context-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "commitSplitContextRequestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitSplitContextRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/splits/{split-context-id}/split-items": {
      "post": {
        "tags": [
          "Split"
        ],
        "operationId": "Split_SplitItems",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "split-context-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "splitItemsRequestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitItemsRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/splits/{split-context-id}/add-check": {
      "post": {
        "tags": [
          "Split"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Split_AddSplitCheck",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "split-context-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "addSplitCheckRequestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSplitCheckRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/splits/{split-context-id}/move": {
      "post": {
        "tags": [
          "Split"
        ],
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Split_MoveSplitItems",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "split-context-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "moveCheckItemsSplitRequestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveCheckItemsSplitRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MoveCheckItemsSplitResponseData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/splits/{split-context-id}/add-seat": {
      "post": {
        "tags": [
          "Split"
        ],
        "operationId": "Split_AddSplitSeat",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "split-context-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "addSplitSeatRequestData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSplitSeatRequestData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddSplitSeatResponseData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Read tables. Supports filtering results using query parameters.",
        "operationId": "Table_GetTables",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "owningEmployeeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "isClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "IsTransferred",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Create a table using provided parameters.",
        "description": "Operation may require **JIT Manager Approval**.",
        "operationId": "Table_CreateTable",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "tableCreationData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableCreateData"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables/{table-id}": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Read a table by ID.",
        "operationId": "Table_GetTableById",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "table-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables/{table-id}/close": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Closes table",
        "operationId": "Table_CloseTable",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "table-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables/{table-id}/rename": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Rename a table belonging to currently logged in employee. Can only rename open tables.",
        "operationId": "Table_RenameTable",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "table-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "tableRenameData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableRenameData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables/{table-id}/lock": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Lock a table belonging to currently logged in employee.",
        "operationId": "Table_LockTable",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "table-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables/{table-id}/unlock": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Unlock a table belonging to currently logged in employee.",
        "operationId": "Table_UnlockTable",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "table-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables/{table-id}/order-items": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Order items on the table.",
        "operationId": "Table_OrderItemsOnTable",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "table-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "orderData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableOrderData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables/{table-id}/add-seat": {
      "post": {
        "tags": [
          "Table"
        ],
        "summary": "Adds seat to the table.",
        "operationId": "Table_AddSeat",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "table-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables/{table-id}/set-guest-count": {
      "post": {
        "tags": [
          "Table"
        ],
        "operationId": "Table_SetGuestCount",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "table-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "guestCountData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetGuestCountData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tables/{table-id}/transfer-table": {
      "post": {
        "tags": [
          "Table"
        ],
        "operationId": "Table_TransferTable",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "table-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "transferTableData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferTableData"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableViewData"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/table-definitions": {
      "get": {
        "tags": [
          "TableDefinition"
        ],
        "summary": "Read all configured table definitions.",
        "operationId": "TableDefinition_GetAllTableDefinitions",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TableDefinitionViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/tenders": {
      "get": {
        "tags": [
          "Tender"
        ],
        "operationId": "Tender_GetAllTenders",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenderDefinitionViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/void-refund-reasons": {
      "get": {
        "tags": [
          "VoidRefundReason"
        ],
        "operationId": "VoidRefundReason_GetAllReasons",
        "parameters": [
          {
            "name": "Employee-Session-Token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VoidReasonCodeViewData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseData"
                }
              }
            }
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "LogInResponseData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SessionTokenData"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "employeeId": {
                "type": "integer",
                "description": "ID of the logged in employee."
              },
              "employeeFirstName": {
                "type": "string",
                "description": "First name of the logged in employee."
              },
              "employeeLastName": {
                "type": "string",
                "description": "Last name of the logged in employee."
              },
              "clockedInJobCodeId": {
                "type": "integer",
                "description": "Job Code Id of the clocked in employee",
                "nullable": true
              },
              "roles": {
                "type": "array",
                "description": "Collection of roles this employee can clock in as.",
                "items": {
                  "$ref": "#/components/schemas/RoleData"
                }
              },
              "shiftState": {
                "description": "Information about the logged in employee's clock in/break in status.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeShiftState"
                  }
                ]
              }
            }
          }
        ]
      },
      "RoleData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "roleId": {
            "type": "integer",
            "description": "ID of the role."
          },
          "name": {
            "type": "string",
            "description": "Full name of the role."
          },
          "shortName": {
            "type": "string",
            "description": "Short version of the role name."
          }
        }
      },
      "EmployeeShiftState": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "CLOCKED_OUT",
          "CLOCKED_IN",
          "ON_BREAK"
        ],
        "enum": [
          "CLOCKED_OUT",
          "CLOCKED_IN",
          "ON_BREAK"
        ]
      },
      "SessionTokenData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sessionToken": {
            "type": "string",
            "description": "Token identifying the log in session for the newly logged in employee.\nProvide this token in Employee-Session-Token header to authorize POS operations."
          }
        }
      },
      "LogInRequestData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmployeeCredentialsData"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "revenueCenterId": {
                "type": "integer",
                "nullable": true
              }
            }
          }
        ]
      },
      "EmployeeCredentialsData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "employeeId",
          "password"
        ],
        "properties": {
          "employeeId": {
            "type": "integer",
            "description": "Id of the employee"
          },
          "password": {
            "type": "string",
            "description": "Employee's password",
            "minLength": 1
          }
        }
      },
      "GetTablesResponseData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tables": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/TableData"
            }
          }
        }
      },
      "TableData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true
          },
          "tableDefinitionId": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "guestCount": {
            "type": "integer",
            "nullable": true
          },
          "seatCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "nullable": true
          },
          "isNamed": {
            "type": "boolean",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "nullable": true
          },
          "owningEmployeeId": {
            "type": "integer",
            "nullable": true
          },
          "checks": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CheckData"
            }
          },
          "type": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TableType"
              }
            ]
          }
        }
      },
      "CheckData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isClosed": {
            "type": "boolean",
            "nullable": true
          },
          "subtotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gratuityPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gratuityTotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gratuityTax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isTaxExempt": {
            "type": "boolean",
            "nullable": true
          },
          "taxExemptNumber": {
            "type": "string",
            "nullable": true
          },
          "entries": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EntryData"
            }
          },
          "payments": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PaymentData"
            }
          },
          "comps": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CompData"
            }
          },
          "promos": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AppliedPromoViewData"
            }
          }
        }
      },
      "EntryData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "nullable": true
          },
          "level": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "seat": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "units": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isSentToKitchen": {
            "type": "boolean",
            "nullable": true
          },
          "isHeld": {
            "type": "boolean",
            "nullable": true
          },
          "orderModeId": {
            "type": "integer",
            "nullable": true
          },
          "courseNumber": {
            "type": "integer",
            "nullable": true
          },
          "totalModifierPrices": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "modifierCodeId": {
            "type": "integer",
            "nullable": true
          },
          "modifierCodeDisplayName": {
            "type": "string",
            "nullable": true
          },
          "modifierCodeIndicator": {
            "type": "string",
            "nullable": true
          },
          "modifierGroupId": {
            "type": "integer",
            "nullable": true
          },
          "isRefill": {
            "type": "boolean",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "itemId": {
            "type": "integer",
            "nullable": true
          },
          "specialMessageString": {
            "type": "string",
            "nullable": true
          },
          "isVoid": {
            "type": "boolean",
            "nullable": true
          },
          "menuId": {
            "type": "integer",
            "nullable": true
          },
          "submenuId": {
            "type": "integer",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "children": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EntryData"
            }
          },
          "includedModifiers": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/IncludedModifierData"
            }
          }
        }
      },
      "IncludedModifierData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true
          },
          "level": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "includedModifiers": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/IncludedModifierData"
            }
          }
        }
      },
      "PaymentData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the payment",
            "nullable": true
          },
          "maskedCardNumber": {
            "type": "string",
            "description": "Masked card number.",
            "nullable": true
          },
          "authorizationString": {
            "type": "string",
            "description": "Authorization string.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount.",
            "format": "double",
            "nullable": true
          },
          "tip": {
            "type": "number",
            "description": "Tip.",
            "format": "double",
            "nullable": true
          },
          "effectiveTenderId": {
            "type": "integer",
            "description": "Represents the target \"report as\" tender type id for a Payment.tender.",
            "nullable": true
          },
          "authorizationStatus": {
            "type": "string",
            "description": "Authorization status.",
            "nullable": true
          },
          "referenceId": {
            "type": "string",
            "description": "Transaction reference of the payment operation.",
            "nullable": true
          },
          "changeAmount": {
            "type": "string",
            "description": "The amount of change that should be returned to the guest due to this payment.",
            "nullable": true
          },
          "authorizationRejectionReason": {
            "type": "string",
            "description": "Error message received during payment authorization",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "description": "Custom attributes of payment",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AttributeData"
            }
          }
        }
      },
      "AttributeData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "CompData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "guestName": {
            "type": "string",
            "nullable": true
          },
          "effectiveName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "checkName": {
            "type": "string",
            "nullable": true
          },
          "discountedEntryIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          },
          "selectedEntryIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "AppliedPromoViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the promo.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The total amount that is discounted by the promo.",
            "format": "double",
            "nullable": true
          },
          "displayPrice": {
            "type": "number",
            "description": "Retrieve displayed price of the promo (top-line). Only valid for QuickCombo at the moment!!",
            "format": "decimal",
            "nullable": true
          },
          "validationCode": {
            "type": "string",
            "description": "Promo validation code.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the promo.",
            "nullable": true
          },
          "discountedCheckItemIds": {
            "type": "array",
            "description": "List of items discounted by this promo.",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          },
          "selectedCheckItemIds": {
            "type": "array",
            "description": "List of items selected for the promo. It is empty if the promo applies to the whole check (see applies_to_whole_check).",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "TableType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "UNDEFINED",
          "TAB",
          "SEAT",
          "TABLE",
          "CHECK",
          "ORDER",
          "REOPENED_CHECK",
          "TEMPORARY",
          "TRANSFER_SEAT",
          "TRANSFER_CHECK"
        ],
        "enum": [
          "UNDEFINED",
          "TAB",
          "SEAT",
          "TABLE",
          "CHECK",
          "ORDER",
          "REOPENED_CHECK",
          "TEMPORARY",
          "TRANSFER_SEAT",
          "TRANSFER_CHECK"
        ]
      },
      "CheckPresenterResponseData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sessionToken": {
            "type": "string"
          },
          "checksToBePaid": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckData"
            }
          }
        }
      },
      "CheckPresenterRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tableId",
          "checkIdsToBePaid"
        ],
        "properties": {
          "tableId": {
            "type": "integer"
          },
          "checkIdsToBePaid": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "EndCheckPresenterData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tableId": {
            "type": "integer"
          }
        }
      },
      "PaymentResponseData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "paymentId": {
            "type": "integer"
          },
          "checkData": {
            "$ref": "#/components/schemas/CheckViewData"
          }
        }
      },
      "CheckViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the message",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "Number of check on a table (0..31)",
            "format": "int32",
            "nullable": true
          },
          "isClosed": {
            "type": "boolean",
            "description": "Flag if the check is closed.",
            "nullable": true
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal line when check closed. Subtotal = Total - Tax - GratuityTotal",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "Total of a check. This is a total of all items, taxes, discounts, surcharges, gratuities. This is the total amount that needs to be paid to fully tender the check. Total = Subtotal + Gratuity_total + Tax",
            "format": "double",
            "nullable": true
          },
          "tax": {
            "type": "number",
            "description": "Total exclusive tax on check. It includes also GratuityTax. Tax = Total - Subtotal - GratuityTotal",
            "format": "double",
            "nullable": true
          },
          "image": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "description": "Total remaining balance of a check.",
            "format": "double",
            "nullable": true
          },
          "isTaxExempt": {
            "type": "boolean",
            "description": "True if check is exempt. Otherwise false.",
            "nullable": true
          },
          "taxExemptNumber": {
            "type": "string",
            "description": "Number of tax exempt.",
            "nullable": true
          },
          "isRefund": {
            "type": "boolean",
            "description": "Flag if the check is refund.",
            "nullable": true
          },
          "guestCount": {
            "description": "Guest count on check.\nSets only if GuestCountBy on GET /employees/current/configuration endpoint is CHECK. Otherwise null.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/GuestCountViewData"
              }
            ]
          },
          "tableId": {
            "type": "integer",
            "description": "Id of the owning table."
          },
          "items": {
            "type": "array",
            "description": "List of check's items",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CheckItemViewData"
            }
          },
          "payments": {
            "type": "array",
            "description": "List of check's payments",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PaymentData"
            }
          },
          "comps": {
            "type": "array",
            "description": "List of check's comps",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CompViewData"
            }
          },
          "promos": {
            "type": "array",
            "description": "List of promos applied on check",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AppliedPromoViewData"
            }
          },
          "gratuities": {
            "type": "array",
            "description": "List of check's gratuities",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AppliedGratuityViewData"
            }
          },
          "lastPrintCheckTime": {
            "type": "string",
            "description": "Time when the check was printed for the last time. In ISO 8601 format, including timezone, e.g.: 2020-03-09T1209:45:51+05:00",
            "nullable": true
          },
          "appliedOrderModeServiceCharges": {
            "type": "array",
            "description": "List of calculated amounts for one specific check for every single order mode (if this order mode is charged)",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderModesServiceChargeData"
            }
          }
        }
      },
      "GuestCountViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "guestCount": {
            "type": "integer",
            "description": "Rounded guest count up to nearest integer.",
            "format": "int32"
          },
          "fractionalGuestCount": {
            "type": "number",
            "description": "Fractional guest count, exposed as a double. Not rounded.",
            "format": "double"
          }
        }
      },
      "CheckItemViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the check item",
            "nullable": true
          },
          "salesItemId": {
            "type": "integer",
            "description": "Id of the sales item.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "It is always 1 for item pricing because consolidation is not currently supported by this API. For quantity pricing, please use \"units\".",
            "nullable": true
          },
          "level": {
            "type": "integer",
            "description": "Level of item = depth in check's tree items list: 0 = item, 1 = modifier, 2 = modifier of a modifier etc.",
            "format": "int32",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "Weight from international scan.",
            "format": "double",
            "nullable": true
          },
          "units": {
            "type": "number",
            "description": "Number of units for this item if it uses unit quantity pricing, otherwise this field is always 1.0.",
            "format": "double",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true
          },
          "isVoid": {
            "type": "boolean",
            "description": "True if the item is void. Otherwise false.",
            "nullable": true
          },
          "menuId": {
            "type": "integer",
            "description": "Menu from which the item was ordered.",
            "nullable": true
          },
          "submenuId": {
            "type": "integer",
            "description": "TS only, top-level entries only: SubMenu from which the item was rung.",
            "nullable": true
          },
          "isSentToKitchen": {
            "type": "boolean",
            "description": "Is check item sent to kitchen.",
            "nullable": true
          },
          "displayPrice": {
            "type": "number",
            "description": "The price of the check item to display on the check. ",
            "format": "decimal"
          },
          "modifiers": {
            "type": "array",
            "description": "Modifiers applied to this item. Includes sales item modifiers,\nautomatically included modifiers, and special messages.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ModifierViewData"
            }
          },
          "seatNumber": {
            "type": "integer",
            "description": "Number of the seat this item is on.",
            "format": "int32",
            "nullable": true
          },
          "autoSendOrderModeId": {
            "type": "integer",
            "description": "Id of Order Mode to auto send held check item.",
            "nullable": true
          },
          "autoSendTime": {
            "type": "string",
            "description": "Time when held check item should be released.",
            "format": "date-time",
            "nullable": true
          },
          "orderModeId": {
            "type": "integer",
            "description": "Order Mode assigned to check item.",
            "nullable": true
          },
          "isHeld": {
            "type": "boolean",
            "description": "Is check item held or not."
          },
          "createdTime": {
            "type": "string",
            "description": "Time when check item was created or when replaced.",
            "format": "date-time",
            "nullable": true
          },
          "serviceChargeAmount": {
            "type": "number",
            "description": "Order Mode charge amount applied to the Item.",
            "format": "decimal",
            "deprecated": true,
            "x-deprecatedMessage": "CheckItemViewData/ServiceChargeAmount is absolete.Use CheckViewData/AppliedOrderModeCharges"
          },
          "maximumHoldResetsCountReached": {
            "type": "boolean",
            "description": "Specifies if actual number of hold resets has reached maximum determined by configuration."
          }
        }
      },
      "ModifierViewData": {
        "type": "object",
        "description": "Modifier applied to the check item. Can contain more modifiers as children.\nCan represent a sales item modifier, automatically included modifier,\nor a special message.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Modifier entry ID. Only filled in for sales item modifiers.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true
          },
          "isIncludedModifier": {
            "type": "boolean",
            "description": "Is included modifier"
          },
          "modifierSalesItemId": {
            "type": "integer",
            "description": "ID of the item applied by this modifier.",
            "nullable": true
          },
          "modifierGroupId": {
            "type": "integer",
            "description": "ID of the modifier group this modifier is in.",
            "nullable": true
          },
          "modifierCodeId": {
            "type": "integer",
            "description": "Id of modifier code applied to this modifier.",
            "nullable": true
          },
          "specialMessage": {
            "type": "string",
            "description": "Special message to be shown as a modifier.",
            "nullable": true
          },
          "isRefill": {
            "type": "boolean",
            "description": "Is refill modifier",
            "nullable": true
          },
          "refillCount": {
            "type": "integer",
            "description": "Number of refills used to modify the check item.",
            "nullable": true
          },
          "isSentToKitchen": {
            "type": "boolean",
            "description": "Is modifier sent to kitchen",
            "nullable": true
          },
          "displayPrice": {
            "type": "number",
            "description": "The price of the modifier to display on the check.",
            "format": "decimal"
          },
          "createdTime": {
            "type": "string",
            "description": "Time when modifier was created or when replaced.",
            "format": "date-time",
            "nullable": true
          },
          "units": {
            "type": "number",
            "description": "Number of units for this item if it uses unit quantity pricing, otherwise this field is always 1.0.",
            "format": "double",
            "nullable": true
          },
          "modifiers": {
            "type": "array",
            "description": "Modifiers applied to this item. Includes sales item modifiers,\nautomatically included modifiers, and special messages.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ModifierViewData"
            }
          }
        }
      },
      "CompViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the comp",
            "nullable": true
          },
          "totalDiscountAmount": {
            "type": "number",
            "description": "The total amount that is discounted by the comp.",
            "format": "double",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount discounted by comp",
            "format": "double",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "Percentage discounted by comp",
            "format": "double",
            "nullable": true
          },
          "storeNumber": {
            "type": "string",
            "description": "4-digit unit number on the FOH. This is useful for multi-store operations which accept employee comps from other locations.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the comp",
            "nullable": true
          },
          "customName": {
            "type": "string",
            "description": "Max 20-characters custom name of the comp",
            "nullable": true
          },
          "discountedItemIds": {
            "type": "array",
            "description": "List of items discounted by this comp.",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "AppliedGratuityViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "gratuityId": {
            "type": "integer",
            "description": "Id of the applied gratuity. Zero for store level gratuity"
          },
          "amount": {
            "type": "string",
            "description": "Fixed amount portion of the gratuity"
          },
          "percentage": {
            "type": "number",
            "description": "Percentage provided to calculate the gratuity",
            "format": "double"
          },
          "percentValue": {
            "type": "string",
            "description": "Percent value calculated from the check's subtotal and given percentage. Zero in case minimum gratuity isn't reached"
          },
          "total": {
            "type": "string",
            "description": "Total amount of the applied gratuity (both amount and percentage parts together). Contains the actual gratuity's contribution to the check's total - taking into account Minimum Gratuity"
          }
        }
      },
      "OrderModesServiceChargeData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "serviceChargeAmount": {
            "type": "number",
            "description": "Calculated amount for all items with specific order mode ID",
            "format": "decimal"
          },
          "orderModeId": {
            "type": "integer",
            "description": "ID for getting more information about specific order mode which is charged. For example OrderViewMoreData - serviceChargeLineText"
          }
        }
      },
      "NcpPaymentRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "checkId"
        ],
        "properties": {
          "checkId": {
            "type": "integer",
            "description": "Id of a check a payment will be applied to"
          },
          "amount": {
            "type": "number",
            "description": "Amount which is applied with the payment\nIf amount is not specified or 0, POS will automatically calculate correct price based on tender type",
            "format": "double",
            "nullable": true
          },
          "tip": {
            "type": "number",
            "description": "Tip which is applied with the payment",
            "format": "double",
            "nullable": true
          },
          "paymentSessionId": {
            "type": "string",
            "description": "Payment session id for external payments"
          }
        }
      },
      "NcpPaymentAuthorizationRequestData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentAuthorizationRequestData"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "checkId": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "PaymentAuthorizationRequestData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "authorizationResult": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentAuthResult"
              }
            ]
          },
          "authorizationCode": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "referenceId": {
            "type": "string",
            "nullable": true
          },
          "authorizedAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "authorizedTip": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "customerReceiptLines": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "merchantReceiptLines": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "maskedCardNumber": {
            "type": "string",
            "nullable": true
          },
          "customAttributes": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/AttributeData"
            }
          }
        }
      },
      "PaymentAuthResult": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Approved",
          "Declined",
          "Failed",
          "Cancelled"
        ],
        "enum": [
          "None",
          "Approved",
          "Declined",
          "Failed",
          "Cancelled"
        ]
      },
      "PrintReceiptRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tableId",
          "checkId"
        ],
        "properties": {
          "tableId": {
            "type": "integer"
          },
          "checkId": {
            "type": "integer"
          },
          "printerId": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "SmsReceiptRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tableId",
          "checkId",
          "customerPhoneNumber"
        ],
        "properties": {
          "tableId": {
            "type": "integer"
          },
          "checkId": {
            "type": "integer"
          },
          "customerPhoneNumber": {
            "type": "string",
            "format": "phone",
            "minLength": 1
          }
        }
      },
      "EmailReceiptRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tableId",
          "checkId",
          "customerEmail"
        ],
        "properties": {
          "tableId": {
            "type": "integer"
          },
          "checkId": {
            "type": "integer"
          },
          "customerEmail": {
            "type": "string",
            "format": "email",
            "minLength": 1
          }
        }
      },
      "ErrorResponseData": {
        "type": "object",
        "description": "Represents details of operation failure.",
        "additionalProperties": false,
        "properties": {
          "details": {
            "type": "array",
            "description": "List of string values that may further help with troubleshooting.\nMay contain details about nested errors, POS API failure types, parameter values etc.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "errorType": {
            "type": "string",
            "description": "Internal error type that can help categorize or pinpoint the problem in External API.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Failure description that should help API consumer troubleshoot the problem.",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code of the response.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CheckCreateData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tableId"
        ],
        "properties": {
          "tableId": {
            "type": "integer"
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "CloseCheckData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "guestCount": {
            "type": "integer",
            "description": "Number of guests on the check.\nOptional, should be filled only if GuestCountBy on GET /employees/current/configuration endpoint is CHECK.",
            "nullable": true
          }
        }
      },
      "CheckItemCreateData": {
        "type": "object",
        "description": "Item to be added to a check.",
        "additionalProperties": false,
        "required": [
          "salesItemId"
        ],
        "properties": {
          "salesItemId": {
            "type": "integer",
            "description": "ID of the sales item to be added."
          },
          "menuId": {
            "type": "integer",
            "description": "If set, specifies the menu from the item should be taken and\nwhich determines item's price if parameter 'price' not set.",
            "nullable": true
          },
          "subMenuId": {
            "type": "integer",
            "description": "If set, specifies the submenu from the item should be taken and\nwhich determines item's price if parameter 'price' not set.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "If set, overrides configuration and specifies item price.\nOtherwise the item price will be obtained from configuration.",
            "format": "decimal",
            "nullable": true
          },
          "seatNumber": {
            "type": "integer",
            "description": "If it is table service, pivot seating is on and the seat parameter is set, the new entry will be appended below all the preexisting entries on the specified seat. If Quick service or pivot seating is off, the seat will always be the table seat.",
            "format": "int32",
            "nullable": true
          },
          "quantity": {
            "description": "Data to add quantity for added check item.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ItemQuantityData"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "If set, overrides configuration and specifies item description. Otherwise the item description will be obtained from configuration.",
            "nullable": true
          },
          "modifiers": {
            "type": "array",
            "description": "List of modifiers that will be applied to check item.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ModifierCreateBaseData"
            }
          }
        }
      },
      "ItemQuantityData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "units": {
            "type": "number",
            "description": "The quantity value to apply.",
            "format": "double"
          },
          "isWeight": {
            "type": "boolean",
            "description": "Are the units the weight of the item?"
          }
        }
      },
      "ModifierCreateBaseData": {
        "type": "object",
        "description": "Modifier to be applied to the added item.\nModifier is interpreted as a special message if special message is specified.",
        "additionalProperties": false,
        "properties": {
          "salesItemId": {
            "type": "integer",
            "description": "ID of the modifier sales item to be added.",
            "nullable": true
          },
          "modifierGroupId": {
            "type": "integer",
            "description": "Id of the modifier group the modifier is in. When 0 is set,\nthe modifier group will be automatically detected\n(works only for non-exception modifiers).",
            "nullable": true
          },
          "modifierCodeId": {
            "type": "integer",
            "description": "Sets the modifier code for the modifier.",
            "nullable": true
          },
          "openModifierName": {
            "type": "string",
            "description": "Name of the modifier when item is an open item. If empty, the item's long name will be used.",
            "nullable": true
          },
          "units": {
            "type": "integer",
            "description": "Multiplier of the modifier that multiplies its current price. Used only for non-exception modifiers.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "If set, overrides configuration and specifies modifier entry price. \nIf not set, price will be taken according to configuration",
            "format": "decimal",
            "nullable": true
          },
          "isExceptionModifier": {
            "type": "boolean",
            "description": "Is exception(submenu level) modifier."
          },
          "modifiers": {
            "type": "array",
            "description": "List of modifiers that will be applied to this modifier.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ModifierCreateBaseData"
            }
          },
          "autoDetectModifierGroup": {
            "type": "boolean",
            "description": "Modifier group will be autodetected in case the specified one is not valid. \nThis only works for non-exception modifiers."
          },
          "specialMessage": {
            "type": "string",
            "description": "If it contains any value, modifier should be interpreted as a special message. \nIn that case other fields should be left uninitialized.",
            "nullable": true
          }
        }
      },
      "CheckItemsDeleteData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "checkItemsToDelete"
        ],
        "properties": {
          "checkItemsToDelete": {
            "type": "array",
            "description": "List of items IDs to be deleted from the check.\nOrdered items are voided, unordered are removed.",
            "items": {
              "type": "integer"
            }
          },
          "voidReasonId": {
            "type": "integer",
            "description": "ID of the void reason for the deletion.\nNeeds to be specified for item voids, ignored for clears.",
            "nullable": true
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to void",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "CheckGiftCardItemCreateData": {
        "type": "object",
        "description": "Gift card item to be added to the check",
        "additionalProperties": false,
        "required": [
          "cardNumber",
          "amount",
          "itemId"
        ],
        "properties": {
          "cardNumber": {
            "type": "string",
            "description": "Gift card number",
            "minLength": 1
          },
          "cardPin": {
            "type": "string",
            "description": "Gift card pin",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount to be added during Gift Card activation",
            "format": "double"
          },
          "itemId": {
            "type": "integer",
            "description": "ID of the sales item representing gift card to be added."
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "CheckViewAndFailedItemsData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "failedItems",
          "checkViewData"
        ],
        "properties": {
          "failedItems": {
            "type": "array",
            "description": "Items from the CheckViewData which failed",
            "items": {
              "$ref": "#/components/schemas/FailedItemData"
            }
          },
          "checkViewData": {
            "description": "CheckViewData",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CheckViewData"
              }
            ]
          }
        }
      },
      "FailedItemData": {
        "type": "object",
        "description": "Specifies a failed item related to a check with some specific reason.",
        "additionalProperties": false,
        "required": [
          "itemId",
          "failureReasonType"
        ],
        "properties": {
          "itemId": {
            "type": "integer",
            "description": "Id of an item on a check"
          },
          "failureReasonType": {
            "description": "The reason why an operation related to the item failed.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/FailureReasonType"
              }
            ]
          }
        }
      },
      "FailureReasonType": {
        "type": "integer",
        "description": "Failure Reason",
        "x-enumNames": [
          "WeighedQCIItemRepetitionNotAllowedEnum",
          "RefillItemRepetitionNotAllowedEnum",
          "CheckOverflowEnum",
          "MaximumItemsPerCheckReachedEnum",
          "VoidedItemRepetitionNotAllowedEnum",
          "SplitItemRepetitionNotAllowedEnum",
          "GiftCertificateItemRepetitionNotAllowedEnum",
          "ItemIsNotAvailableOnCurrentMenuEnum",
          "RepetitionActionUnavailableForThisItemEnum",
          "ModifierRepetitionNotAllowedEnum",
          "RepetitionRequiresManagerRightsEnum",
          "ChangeQuantitiesOnModifierNotAllowedEnum",
          "ItemAvailabilityExceededEnum",
          "CheckActionNotAllowedEnum"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      "OrderByQuantityData": {
        "type": "object",
        "description": "Repeats a set of entries in the check specified by their ids in entry ids as many times as specified by count parameter.",
        "additionalProperties": false,
        "required": [
          "itemIds",
          "count",
          "isUnorderedItemIncluded"
        ],
        "properties": {
          "itemIds": {
            "type": "array",
            "description": "List of item(s) on check for repeat",
            "items": {
              "type": "integer"
            }
          },
          "count": {
            "type": "integer",
            "description": "Specifies how many times will be items added to the check.",
            "format": "int32"
          },
          "isUnorderedItemIncluded": {
            "type": "boolean",
            "description": "Assistant parameter for count. If it is true for ordered items and unordered items is used different calculation method."
          }
        }
      },
      "ModifierCreateData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModifierCreateBaseData"
          },
          {
            "type": "object",
            "description": "Modifier to be applied to the added item. It may require JIT Approval.\nModifier is interpreted as a special message if special message is specified.",
            "additionalProperties": false,
            "properties": {
              "parentModifierId": {
                "type": "integer",
                "description": "Id of parent modifier to modify.",
                "nullable": true
              },
              "isRefill": {
                "type": "boolean",
                "description": "Is refill modifer."
              },
              "authorizingManager": {
                "description": "Authorizing manager, required only when the employee doesn't have enough right to add modifer",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EmployeeCredentialsData"
                  }
                ]
              }
            }
          }
        ]
      },
      "ModifierDeleteData": {
        "type": "object",
        "description": "Modifier to delete.",
        "additionalProperties": false,
        "properties": {
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to delete modifer",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "ModifierBatchReplaceData": {
        "type": "object",
        "description": "Contains new list of modifiers for batch replace.",
        "additionalProperties": false,
        "properties": {
          "parentModifierId": {
            "type": "integer",
            "description": "Id of parent modifier to modify.",
            "nullable": true
          },
          "modifiers": {
            "type": "array",
            "description": "New list of modifiers",
            "items": {
              "$ref": "#/components/schemas/ModifierCreateBaseData"
            }
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to replace modifers",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "PrintChecksRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "checkIds"
        ],
        "properties": {
          "checkIds": {
            "type": "array",
            "description": "Id of checks which will be printed.",
            "items": {
              "type": "integer"
            }
          },
          "printerId": {
            "type": "integer",
            "description": "Used printer Id. If not presented or is 0, then the default printer will be used.",
            "nullable": true
          }
        }
      },
      "PaymentRequestData": {
        "type": "object",
        "description": "PaymentRequestData represents payment request",
        "additionalProperties": false,
        "required": [
          "tenderId"
        ],
        "properties": {
          "tenderId": {
            "type": "integer",
            "description": "Id of a tender which is used for the payment\nIf tender id is not specified default tender id will be used, which is configured in appsettings.json"
          },
          "amount": {
            "type": "number",
            "description": "Amount which is applied with the payment\nIf amount is not specified or 0, POS will automatically calculate correct price based on tender type",
            "format": "double",
            "nullable": true
          },
          "tip": {
            "type": "number",
            "description": "Tip which is applied with the payment",
            "format": "double",
            "nullable": true
          },
          "paymentSessionId": {
            "type": "string",
            "description": "Payment session id for external payments"
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "PaymentDeleteRequestData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to delete payment",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "GiftCardPaymentRequestData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentRequestData"
          },
          {
            "type": "object",
            "description": "GiftCardPaymentRequestData represents gift card payment request",
            "additionalProperties": false,
            "properties": {
              "cardNumber": {
                "type": "string",
                "description": "Gift card number"
              },
              "cardPin": {
                "type": "string",
                "description": "Gift card pin"
              }
            }
          }
        ]
      },
      "DeleteGiftCardPaymentRequestData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to delete gift card payment",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "PaymentPreAuthData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tenderId"
        ],
        "properties": {
          "tenderId": {
            "type": "integer",
            "description": "Id of the tender used for this payment."
          }
        }
      },
      "PaymentIncreaseAuthData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount to authorize.",
            "format": "double"
          }
        }
      },
      "PaymentCloseAuthData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount to authorize.",
            "format": "double",
            "nullable": true
          },
          "tip": {
            "type": "number",
            "description": "Tip to authorize.",
            "format": "double",
            "nullable": true
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to CloseAuth",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "TenderDefaultAmountData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "amount": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "SetGuestCountData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "guestCount"
        ],
        "properties": {
          "guestCount": {
            "type": "integer",
            "description": "Number of guests."
          }
        }
      },
      "GratuityRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "gratuityId",
          "gratuityValue"
        ],
        "properties": {
          "gratuityId": {
            "type": "integer",
            "description": "Id of gratuity which value will be set"
          },
          "gratuityValue": {
            "type": "number",
            "description": "Value to which gratuity will be set",
            "format": "double"
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "JitApprovalData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "SendSmsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "customerPhoneNumber"
        ],
        "properties": {
          "customerPhoneNumber": {
            "type": "string",
            "format": "phone",
            "minLength": 1
          }
        }
      },
      "SendEmailRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "customerEmail"
        ],
        "properties": {
          "customerEmail": {
            "type": "string",
            "format": "email",
            "minLength": 1
          }
        }
      },
      "HoldItemsData": {
        "type": "object",
        "description": "Holds the specified entries. Holding means entries are not ordered, but items are reserved and item availability is decreased accordingly (if configured). Entries can automatically be ordered after auto_order_time. During auto ordering any OrderMode configuration related to item selection is ignored - only held entries are ordered.",
        "additionalProperties": false,
        "required": [
          "itemIds"
        ],
        "properties": {
          "itemIds": {
            "type": "array",
            "description": "List of check items on check to be held.",
            "minItems": 1,
            "items": {
              "type": "integer"
            }
          },
          "autoOrderTime": {
            "type": "integer",
            "description": "If set, entries will be automatically ordered after specified number of seconds, else entries will be held infinitely.",
            "nullable": true
          },
          "autoOrderModeId": {
            "type": "integer",
            "description": "If set, id of the order mode that will be used to order the specified entries after the timeout has passed.",
            "nullable": true
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right for Hold Item functionality.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "CompApplyData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "compDefinitionId": {
            "type": "integer",
            "description": "Id of the comp definition.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Max 20-characters custom name of the comp that will be created.\nLonger name will be truncated. If empty, the comp definition name will be used.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount that will be comped. Amount is allowed only if CompDefinition.mustEnterAmount is true.",
            "format": "double",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "Rate that will be comped. Rate is allowed only if CompDefinition.mustEnterRate is true.\nThe value of amount is supposed to be in range from 0 (excluded) to 1 (included).",
            "format": "double",
            "nullable": true
          },
          "checkItemIds": {
            "type": "array",
            "description": "List of items to apply the comp to. If CompDefinition.mustSelectItems is true,\nthis parameter is required. If not, it will be ignored.",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          },
          "storeNumber": {
            "type": "string",
            "description": "4-digit unit number on the FOH. This is useful for multi-store operations\nwhich accept employee comps from other locations.",
            "nullable": true
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the current employee doesn't have rights to apply comps.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "CompDeleteData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "authorizingManager": {
            "description": "Authorizing manager, required only when the current employee doesn't have rights to delete comps.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "RemoveCompData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "compIds": {
            "type": "array",
            "description": "list of compids to be removed from check",
            "items": {
              "type": "integer"
            }
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right for Hold Item functionality.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "PromoApplyData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "promoId",
          "amount"
        ],
        "properties": {
          "promoId": {
            "type": "integer",
            "description": "Id of the promo to apply."
          },
          "amount": {
            "type": "number",
            "description": "Amount that will be discounted.\nIt is used only if PromoType.PromoKind is PK_COUPON and amount for the coupon should be specified by user.\nAmount will be in percents if PromotionCouponConfig.calculate_by_percent is true, amount of money otherwise.",
            "format": "double"
          },
          "validationCode": {
            "type": "string",
            "description": "Promo validation code.\nIt can be required and has a max length depending on validation code config.",
            "nullable": true
          },
          "promoItemGroups": {
            "type": "array",
            "description": "An optional collection of items with groupId to apply promo (if it is selection-based promo)",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PromoItemGroupData"
            }
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "PromoItemGroupData": {
        "type": "object",
        "description": "Promo item groups for selection-based promo to apply.",
        "additionalProperties": false,
        "required": [
          "groupId",
          "itemIds"
        ],
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "Promo item group Id.\nFor basic promo is 0.\nFor a BOGO:\n    0 - discounted items\n    1 - qualification items.\nFor COM and Engine BOGO:\n    0 - qualifying items\n    1 - discounted items.\nFor Quick Combos and Group Combos, the group should correspond to respective combo component."
          },
          "itemIds": {
            "type": "array",
            "description": "Ids of items in a group defined on Promo.",
            "minItems": 1,
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "PromoDiscountableItems": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "Required items.",
            "items": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        }
      },
      "PromoDiscountableItemsData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "promoId"
        ],
        "properties": {
          "promoId": {
            "type": "integer",
            "description": "ID of promo from check for which you want to get eligible items."
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "PromoRequiredItems": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of promo required items.",
            "minLength": 1
          },
          "items": {
            "type": "array",
            "description": "Required items.",
            "items": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        }
      },
      "PromoDeleteData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "PackagePromoApplyData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "promoId",
          "guestCount"
        ],
        "properties": {
          "promoId": {
            "type": "integer",
            "description": "Id of the promo to apply."
          },
          "guestCount": {
            "type": "integer",
            "description": "Number of people for the package promo.\nEach package promo has a guest count range into which this value needs to fit.\nThe whole set of package promo components will be added guest_count times."
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "PackagePromoDeleteData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "reasonCodeId"
        ],
        "properties": {
          "reasonCodeId": {
            "type": "integer",
            "description": "Id of the reason code to describe why items in the package promo are being deleted."
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "CompDefinition": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "comp definition id"
          },
          "name": {
            "type": "string",
            "description": "comp definition name",
            "nullable": true
          },
          "itemCategory": {
            "$ref": "#/components/schemas/ItemCategoryDefinition"
          },
          "rate": {
            "type": "number",
            "description": "percent rate to be comped of amount",
            "format": "double",
            "nullable": true
          },
          "maximumValue": {
            "type": "number",
            "description": "maximum value",
            "format": "double",
            "nullable": true
          },
          "mustSelectItems": {
            "type": "boolean",
            "description": "Comp type that requires specifiaction of items to be comped",
            "nullable": true
          },
          "mustEnterAmount": {
            "type": "boolean",
            "description": "Comp type that requires the specification of the amount to be comped",
            "nullable": true
          },
          "mustEnterStoreNumber": {
            "type": "boolean",
            "description": "Comp type that requires specification of the store",
            "nullable": true
          },
          "mustEnterName": {
            "type": "boolean",
            "description": "Comp type that requires specification name for the comp",
            "nullable": true
          },
          "mustEnterRate": {
            "type": "boolean",
            "description": "Comp type that requires the specification of the rate to be comped.",
            "nullable": true
          }
        }
      },
      "ItemCategoryDefinition": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "itemIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          },
          "excludeFromTipShare": {
            "type": "boolean",
            "nullable": true
          },
          "maxItemsPerCheck": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "DeviceData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "employeeSessionTimeoutMilliseconds": {
            "type": "integer",
            "description": "Employee log-in token lifetime in milliseconds",
            "format": "int32"
          },
          "customName": {
            "type": "string",
            "description": "Device custom name.",
            "nullable": true
          },
          "deviceType": {
            "type": "string",
            "description": "Device type.",
            "nullable": true
          },
          "defaultPrinter": {
            "type": "integer",
            "description": "Default receipt printer for this device.",
            "nullable": true
          },
          "functionalModes": {
            "type": "array",
            "description": "Specifies the functional modes to run in.",
            "items": {
              "$ref": "#/components/schemas/DeviceFunctionalMode"
            }
          },
          "checkPresenterConfiguration": {
            "description": "Contains check presenter configuration if check presenter functional mode is set.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CheckPresenterConfigurationData"
              }
            ]
          },
          "orderingConfiguration": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrderingConfigurationData"
              }
            ]
          },
          "platformCredentials": {
            "description": "Information and credentials necessary for communication with Business Services Platform\nand all other ISIP endpoints.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PlatformCredentialsData"
              }
            ]
          },
          "companyLogoData": {
            "type": "string",
            "description": "Company logo to be shown on the device login screen. Encoded as HTML image tag Data URL string\nfor easy consumption from the One Aloha UI app or other HTML-based GUI client.\nE.g. \"data:image/bmp;base64,&lt;image data&gt;\"\nSee https://html.com/attributes/img-src/#Data_URIs for details.",
            "nullable": true
          },
          "revenueCenterId": {
            "type": "integer",
            "description": "Device revenue center.",
            "nullable": true
          },
          "connectedPaymentsCommonClientConfiguration": {
            "description": "Configuration for Connected Payments Common Client used by One Aloha UI app for payment integrations.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ConnectedPaymentsCommonClientConfigurationData"
              }
            ]
          },
          "siteInfo": {
            "description": "Specifies Site Info to be displayed in the app in order to provide user information for support line.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SiteInfo"
              }
            ]
          }
        }
      },
      "DeviceFunctionalMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "CHECK_PRESENTER",
          "ORDERING"
        ],
        "enum": [
          "CHECK_PRESENTER",
          "ORDERING"
        ]
      },
      "CheckPresenterConfigurationData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "printAlways": {
            "type": "boolean",
            "nullable": true
          },
          "showTipScreen": {
            "type": "boolean",
            "nullable": true
          },
          "showReceiptPrint": {
            "type": "boolean",
            "nullable": true
          },
          "showReceiptEmail": {
            "type": "boolean",
            "nullable": true
          },
          "showReceiptSMS": {
            "type": "boolean",
            "nullable": true
          },
          "showSignatureScreen": {
            "type": "boolean",
            "nullable": true
          },
          "signatureBoxText": {
            "type": "string",
            "nullable": true
          },
          "tipLow": {
            "type": "string",
            "nullable": true
          },
          "tipMedium": {
            "type": "string",
            "nullable": true
          },
          "tipHigh": {
            "type": "string",
            "nullable": true
          },
          "tipLimitPercent": {
            "type": "string",
            "nullable": true
          },
          "logLevel": {
            "type": "string",
            "nullable": true
          },
          "enableCustomerInfo": {
            "type": "boolean",
            "nullable": true
          },
          "customerInfoTitle": {
            "type": "string",
            "nullable": true
          },
          "customerInfoText": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrderingConfigurationData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "gratuityConfiguration": {
            "description": "Contains general configuration for adding gratuities.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AddGratuityConfiguration"
              }
            ]
          },
          "holdItemsConfiguration": {
            "description": "Contains configuration for hold/delay items functionality.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HoldItemsConfigurationData"
              }
            ]
          },
          "submenuPanelGridSize": {
            "description": "Configured dimensions of the submenu panel grid.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PanelGridSize"
              }
            ]
          },
          "modifierPanelGridSize": {
            "description": "Configured dimensions of the modifier panel grid.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PanelGridSize"
              }
            ]
          },
          "orderModeStoreSettings": {
            "description": "Configured behavior for order modes in store settings.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrderModeStoreSettingsData"
              }
            ]
          }
        }
      },
      "AddGratuityConfiguration": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "enableAutomaticGratuity": {
            "type": "boolean",
            "nullable": true
          },
          "defaultPercentage": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maximumPercentage": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "defaultAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maximumAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minimumGuestsForAutomaticGratuity": {
            "type": "integer",
            "nullable": true
          },
          "isManagerRequired": {
            "type": "boolean",
            "nullable": true
          },
          "allowManagerToAdjust": {
            "type": "boolean",
            "nullable": true
          },
          "allowServerToAdjust": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "HoldItemsConfigurationData": {
        "type": "object",
        "description": "Configuration for Hold Items functionality.",
        "additionalProperties": false,
        "properties": {
          "isHoldingItemsDisabled": {
            "type": "boolean",
            "description": "Is Hold button disabled/hidden on Order Entry screen."
          },
          "autoReleaseFromHold": {
            "type": "boolean",
            "description": "Activates (if true) the Delay Send feature and enables the system to set a time of release \nfor items placed on hold. Items are ordered after the time elapses."
          },
          "holdTimeButtons": {
            "type": "array",
            "description": "Configuration of button in Hold Items popup - defines number of minutes to be added to Hold Time.",
            "items": {
              "type": "integer"
            }
          },
          "showDestinationTime": {
            "type": "boolean",
            "description": "Display or hide Hold Time information in Check View. If false then Hold Time is displayed as countdown."
          },
          "restrictedCategories": {
            "type": "array",
            "description": "List of Item Categories not allowed to be used by Hold Item functionality.",
            "items": {
              "type": "integer"
            }
          },
          "maximumNumberOfHoldResets": {
            "type": "integer",
            "description": "The number of times you can place an item on hold for an order in which you are using the Delay Send feature. NoHold setting must be false to enable this option.",
            "format": "int32"
          }
        }
      },
      "PanelGridSize": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "numberOfColumns": {
            "type": "integer",
            "description": "The number of columns in the grid.",
            "nullable": true
          },
          "numberOfRows": {
            "type": "integer",
            "description": "The number of rows in the grid.",
            "nullable": true
          }
        }
      },
      "OrderModeStoreSettingsData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "singleOrderModePerGuestCheck": {
            "type": "boolean",
            "description": "If true only single order mode can be assigned to check items.",
            "nullable": true
          },
          "defaultOrderMode": {
            "type": "integer",
            "description": "Default order mode to be assigned with auto-ordering",
            "format": "int32",
            "nullable": true
          },
          "uponLeavingOrderEntryScreen": {
            "description": "Defines how to handle unordered items when leaving order entry screen",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrderModeSettings"
              }
            ]
          }
        }
      },
      "OrderModeSettings": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "ASSIGN_DEFAULT_ORDER_MODE",
          "DISABLE_AUTO_ORDERING",
          "PROMPT_FOR_ORDER_MODE",
          "MANAGER_TOGGLES_AUTO_ORDERING",
          "DISABLE_AUTO_ORDERING_ON_FAST_TRANSFERS"
        ],
        "enum": [
          "ASSIGN_DEFAULT_ORDER_MODE",
          "DISABLE_AUTO_ORDERING",
          "PROMPT_FOR_ORDER_MODE",
          "MANAGER_TOGGLES_AUTO_ORDERING",
          "DISABLE_AUTO_ORDERING_ON_FAST_TRANSFERS"
        ]
      },
      "PlatformCredentialsData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "gatewayBaseUrl": {
            "type": "string",
            "description": "Base address of the Business Services Platform's API gateway\nin the configured environment.\nE.g. \"https://gateway.ncrplatform.com/\""
          },
          "organization": {
            "type": "string",
            "description": "Short name or ID (can be used interchangeably) of the organization\nthe site belongs to."
          },
          "enterpriseUnit": {
            "type": "string",
            "description": "Enterprise unit of the site."
          },
          "applicationKey": {
            "type": "string",
            "description": "Application key of the 1AUI app in the configured environment."
          },
          "technicalUserSharedKey": {
            "type": "string",
            "description": "Shared key of the technical user used for authentication and authorization\nof cloud and ISIP communication.\nUsed for HMAC auth schema as used by Business Services Platform."
          },
          "technicalUserSecretKey": {
            "type": "string",
            "description": "Secret key of the technical user used for authentication and authorization\nof cloud and ISIP communication.\nUsed for HMAC auth schema as used by Business Services Platform."
          }
        }
      },
      "ConnectedPaymentsCommonClientConfigurationData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "companyNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "configAddress": {
            "type": "string",
            "nullable": true
          },
          "configPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "storeNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "laneNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "clientKey": {
            "type": "string",
            "nullable": true
          },
          "secretKey": {
            "type": "string",
            "nullable": true
          },
          "hostAddress": {
            "type": "string",
            "nullable": true
          },
          "hostAddressSecondary": {
            "type": "string",
            "nullable": true
          },
          "hostPort": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "hostPortSecondary": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "SiteInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cmcId": {
            "type": "string",
            "description": "Command Center ID key, unique key of every supported site.",
            "nullable": true
          },
          "siteName": {
            "type": "string",
            "description": "Name of Site where device is connected.",
            "nullable": true
          },
          "siteLocation": {
            "type": "string",
            "description": "Address of Site where device is connected.",
            "deprecated": true,
            "x-deprecatedMessage": "siteLocation field is obsolete, please use siteLocationAddressLines for more granular data.",
            "nullable": true
          },
          "siteLocationAddressLines": {
            "type": "array",
            "description": "Address lines of Site where device is connected",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "concept": {
            "type": "string",
            "description": "Information about what concept is used by Site device where device is connected (e.g. QS, TS, QSTS).",
            "nullable": true
          },
          "numberOfTerminals": {
            "type": "integer",
            "description": "Number of devices used in Site.",
            "format": "int32",
            "nullable": true
          },
          "supportLineNumber": {
            "type": "string",
            "description": "Telephone number to Support Line.",
            "nullable": true
          }
        }
      },
      "LogEntryData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "logRecords"
        ],
        "properties": {
          "logRecords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "JobCodeData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Job code Id"
          },
          "canLookupSalesItems": {
            "type": "boolean",
            "description": "True if the employee in this role can use lookup items feature. Otherwise false."
          },
          "canAddCheckItemsUsingLookup": {
            "type": "boolean",
            "description": "True if the employee in this role can use lookup items for adding sales item to a check. Otherwise false."
          },
          "pivotSeatingEnabled": {
            "type": "boolean",
            "description": "True if the employee in this role can use pivot seating. Otherwise false."
          },
          "mustPromptForOrderMode": {
            "type": "boolean",
            "description": "True if the employee needs manager approval for ordering. Otherwise false."
          },
          "onlyOrderModeId": {
            "type": "integer",
            "description": "Restricted order mode, if any, for this jobcode.",
            "nullable": true
          },
          "restrictedOrderModeIds": {
            "type": "array",
            "description": "The only order mode ids eligible for this job code. Lower priority than only_order_mode_id. In QS, no value is set for restricted order mode ids.",
            "items": {
              "type": "integer"
            }
          },
          "useTeamGetCheck": {
            "type": "boolean",
            "description": "True if the employee can see tables/chesk of other employees. Otherwise false."
          },
          "limitToLaborCategoryId": {
            "type": "integer",
            "description": "Labour category ID limitation.\nThe Labor Groups function enables you to combine sales/general categories with job codes to track labor costs associated with different areas in your restaurant."
          },
          "canAssignGratuity": {
            "type": "boolean",
            "description": "True if the employee in this role can use adjust gratuity. Otherwise false."
          },
          "canDeleteGratuity": {
            "type": "boolean",
            "description": "True if the employee in this role can use delete gratuity. Otherwise false."
          },
          "canOrderEntry": {
            "type": "boolean"
          },
          "isBartender": {
            "type": "boolean"
          },
          "isOrderTaker": {
            "type": "boolean"
          },
          "isCashier": {
            "type": "boolean"
          },
          "disableCloseChecksScreen": {
            "type": "boolean"
          },
          "disableCloseChecksButton": {
            "type": "boolean"
          },
          "canAssignPromo": {
            "type": "boolean",
            "description": "Allows employees the ability to apply a promotion to guest checks. This is usually reserved for managers."
          },
          "canDeletePromo": {
            "type": "boolean",
            "description": "Allows employees the ability to delete a promotion from the check."
          },
          "revenueCenterId": {
            "type": "integer",
            "description": "Revenue center Id"
          },
          "canAdjustPayment": {
            "type": "boolean",
            "description": "Defines if user can adjust payment"
          },
          "canDeletePayment": {
            "type": "boolean",
            "description": "Defines if user can delete payment"
          },
          "canReprint": {
            "type": "boolean",
            "description": "Allows employees the ability to reprint clock-outs, checkout reports, and guest checks."
          },
          "canUseFloorPlan": {
            "type": "boolean",
            "description": "Defines if employees have an ability to use a floor plan."
          },
          "customOrderEntryPanelId": {
            "type": "integer",
            "description": "Id of custom Order entry panel to replace the default one. Depending on an event scheduled in CFC.",
            "nullable": true
          },
          "customCloseScreenPanelId": {
            "type": "integer",
            "description": "Id of custom Close screen panel to replace the default one. Depending on an event scheduled in CFC.",
            "nullable": true
          },
          "isShiftRequired": {
            "type": "boolean",
            "description": "Is user required to clock in/out",
            "nullable": true
          },
          "canApplyTaxExempt": {
            "type": "boolean",
            "description": "Allows employees the ability to apply a tax exemption without manager approval.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Job code name.",
            "nullable": true
          },
          "accessLevelName": {
            "type": "string",
            "description": "Name of the POS access level.",
            "nullable": true
          },
          "accessLevelId": {
            "type": "integer",
            "description": "Id of the POS access level."
          },
          "canApproveWithoutClockin": {
            "type": "boolean",
            "description": "Decides whether user can perform Manager Approval without being clocked-in.",
            "nullable": true
          },
          "mustRequireDrawerToClose": {
            "type": "boolean",
            "description": "Defines if check can be closed only when it is asigned to Cach Drawer - JobCodeDto, must_require_drawer_to_close"
          }
        }
      },
      "ClockInRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "jobCodeId"
        ],
        "properties": {
          "jobCodeId": {
            "type": "integer",
            "description": "Id of the job code user is clocking in"
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to clock into the [JobCodeId]",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "ClockOutRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "declaredTips"
        ],
        "properties": {
          "declaredTips": {
            "type": "number",
            "format": "double"
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to clock out",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "DeleteClockOutRequestData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "employeeId": {
            "type": "string",
            "description": "Id of employee to delete clock out for."
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to delete clock out.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "BreakInRequestData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to break in",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "BreakOutRequestData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right to break out",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "ClockInMessageData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the message"
          },
          "messageLines": {
            "type": "array",
            "description": "Message split into separate lines",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PendingClockInMessagesRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "jobCodeId"
        ],
        "properties": {
          "jobCodeId": {
            "type": "integer",
            "description": "JobCode of logged-in employee"
          }
        }
      },
      "AcknowledgeClockInRequestData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "punchAcknowledgement": {
            "description": "Acceptance result to apply to acknowledge message",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PunchAcknowledgementRequestData"
              }
            ]
          }
        }
      },
      "PunchAcknowledgementRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "acknowledgmentGuid",
          "responseTime",
          "acceptanceResponse",
          "jobCodeId"
        ],
        "properties": {
          "acknowledgmentGuid": {
            "type": "string",
            "description": "Id of acknowledgment",
            "minLength": 1
          },
          "responseTime": {
            "type": "string",
            "description": "Time when the employee has responded to the ClockIn message,in ISO 8601 format including timezone, eg. 2019-08-05T12:56:26+02:00",
            "minLength": 1
          },
          "acceptanceResponse": {
            "type": "boolean",
            "description": "Acceptance result"
          },
          "approvingManager": {
            "type": "integer",
            "description": "Approving manager if necessary",
            "nullable": true
          },
          "jobCodeId": {
            "type": "integer",
            "description": "JobCode of currently logged in employee"
          }
        }
      },
      "ConfigurationData": {
        "type": "object",
        "description": "Employee configuration data.",
        "additionalProperties": false,
        "properties": {
          "pivotSeatingEnabled": {
            "type": "boolean",
            "description": "True if the employee is allowed to work with pivot seating. Otherwise false."
          },
          "pivotSeatingAutoIncrementCategory": {
            "type": "integer",
            "description": "If value &gt; 0, id of sales item category for auto increment pivot seating. If null, the feature is disabled.",
            "nullable": true
          },
          "canLookupSalesItems": {
            "type": "boolean",
            "description": "True if the employee is allowed to look up sales items.",
            "nullable": true
          },
          "canAddCheckItemsUsingLookup": {
            "type": "boolean",
            "description": "True if the employee is allowed to add check items from the sales item lookup.",
            "nullable": true
          },
          "categoryForSalesItemLookup": {
            "type": "integer",
            "description": "If specified, only sales items from the referenced category should be visible in the lookup.",
            "nullable": true
          },
          "mustPromptForOrderMode": {
            "type": "boolean",
            "description": "True, if the employee have to prompt for order mode. Otherwise false.",
            "nullable": true
          },
          "restrictedOrderModeIds": {
            "type": "array",
            "description": "The List of order mode ids eligible for this employee.",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          },
          "guestCountBy": {
            "description": "Configuration where to store GuestCount.\nIf is by TABLE, UI should ask for GuestCount when a new table is created.\nIf is by CHECK, the employee has to enter GuestCount in life cycle of check.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/GuestCountByMode"
              }
            ]
          },
          "allowZeroGuestCount": {
            "type": "boolean",
            "description": "Enables an employee to enter zero (0) when prompted for a guest count.\nWhen false this option requires employees to enter a guest count greater than zero."
          },
          "useTeamGetCheck": {
            "type": "boolean",
            "description": "True if the employee can see tables/chesk of other employees. Otherwise false.",
            "nullable": true
          },
          "limitToLaborCategoryId": {
            "type": "integer",
            "description": "Labor category ID limitation.\nThe Labor Groups function enables you to combine sales/general categories with job codes to track labor costs associated with different areas in your restaurant.",
            "nullable": true
          },
          "customOrderEntryPanelId": {
            "type": "integer",
            "description": "Id of custom Order entry panel to replace the default one. Depending on an event scheduled in CFC.",
            "nullable": true
          },
          "customCloseScreenPanelId": {
            "type": "integer",
            "description": "Id of custom Close screen panel to replace the default one. Depending on an event scheduled in CFC.",
            "nullable": true
          },
          "canAssignGratuity": {
            "type": "boolean",
            "description": "True if the employee in this role can use adjust gratuity. Otherwise false.",
            "nullable": true
          },
          "canDeleteGratuity": {
            "type": "boolean",
            "description": "True if the employee in this role can use delete gratuity. Otherwise false.",
            "nullable": true
          },
          "minOpenItemPrice": {
            "type": "number",
            "description": "Minimum price for open item.",
            "format": "double",
            "nullable": true
          },
          "maxOpenItemPrice": {
            "type": "number",
            "description": "Maximum price for open item.",
            "format": "double",
            "nullable": true
          },
          "canOrderEntry": {
            "type": "boolean",
            "description": "Defines if user with assigned jobcode can enter an order - JobCodeDto, can_order_entry\"",
            "nullable": true
          },
          "isBartender": {
            "type": "boolean",
            "description": "Defines if user with assigned jobcode is bartender - JobCodeDto, is_bartender",
            "nullable": true
          },
          "isOrderTaker": {
            "type": "boolean",
            "description": "Defines if user with assigned jobcode is order taker - JobCodeDto, is_order_taker",
            "nullable": true
          },
          "isCashier": {
            "type": "boolean",
            "description": "Defines if user with assigned jobcode is cashier - JobCodeDto, is_cashier",
            "nullable": true
          },
          "disableCloseChecksScreen": {
            "type": "boolean",
            "description": "Defines if user with assigned jobcode can go to Payment screen - JobCodeDto, disable_close_checks_screen",
            "nullable": true
          },
          "disableCloseChecksButton": {
            "type": "boolean",
            "description": "Defines if user with assigned jobcode can use Pay button - JobCodeDto, disable_close_check_button",
            "nullable": true
          },
          "canAssignPromo": {
            "type": "boolean",
            "description": "Allows employees the ability to apply a promotion to guest checks. This is usually reserved for managers.",
            "nullable": true
          },
          "canDeletePromo": {
            "type": "boolean",
            "description": "Allows employees the ability to delete a promotion from the check.",
            "nullable": true
          },
          "useEntreesForGuestCounts": {
            "type": "boolean",
            "description": "Use entrees for guest counts.",
            "nullable": true
          },
          "canAdjustPayment": {
            "type": "boolean",
            "description": "Defines if user can adjust payment",
            "nullable": true
          },
          "canDeletePayment": {
            "type": "boolean",
            "description": "Defines if user can delete payment",
            "nullable": true
          },
          "canReprint": {
            "type": "boolean",
            "description": "Allows employees the ability to reprint clock-outs, checkout reports, and guest checks.",
            "nullable": true
          },
          "canUseFloorPlan": {
            "type": "boolean",
            "description": "Defines if employees have an ability to use a floor plan.",
            "nullable": true
          },
          "isShiftRequired": {
            "type": "boolean",
            "description": "Is user required to clock in/out",
            "nullable": true
          },
          "enablePaymentSummary": {
            "type": "boolean",
            "description": "Indicates whether the payment summary should be displayed.",
            "nullable": true
          },
          "accessLevelId": {
            "type": "integer",
            "description": "Id of the POS access level.",
            "nullable": true
          },
          "accessLevelName": {
            "type": "string",
            "description": "Name of the POS access level.",
            "nullable": true
          },
          "onlyCheckAssignedToCashDrawerToBeClosed": {
            "type": "boolean",
            "description": "Defines if check can be closed only when it is asigned to Cach Drawer - JobCodeDto, must_require_drawer_to_close",
            "nullable": true
          },
          "isSplitItemsDisabled": {
            "type": "boolean",
            "description": "Setting to disable the ability for all employees to split items between checks.",
            "nullable": true
          }
        }
      },
      "GuestCountByMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "TABLE",
          "CHECK"
        ],
        "enum": [
          "TABLE",
          "CHECK"
        ]
      },
      "EmployeeViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of employee"
          },
          "firstName": {
            "type": "string",
            "description": "First name of employee",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of employee",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name of employee",
            "nullable": true
          },
          "isLoggedIn": {
            "type": "boolean",
            "description": "Is employee currently logged in"
          },
          "isClockedIn": {
            "type": "boolean",
            "description": "Is employee currently clocked in"
          },
          "isTerminated": {
            "type": "boolean",
            "description": "Is employee currently terminated"
          },
          "jobCodeIds": {
            "type": "array",
            "description": "List of job code ids that assigned to employee",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "FloorPlanViewData": {
        "type": "object",
        "description": "Floor plan representation",
        "additionalProperties": false,
        "properties": {
          "backgroundImageUrl": {
            "type": "string",
            "description": "Floor plan's background image URL.",
            "nullable": true
          },
          "panels": {
            "type": "array",
            "description": "Screen's panels.",
            "items": {
              "type": "integer"
            }
          },
          "accessiblePanels": {
            "type": "array",
            "description": "All accessible panels from main floor plan screen through any configured buttons. Includes all children and sub-children accessible transitively.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "GratuityConfigurationData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Gratuity id\nZero for store gratuity"
          },
          "name": {
            "type": "string",
            "description": "Name of the gratuity",
            "nullable": true
          },
          "minimumGratuity": {
            "type": "number",
            "description": "Specifies the minimum gratuity for a guest check",
            "format": "double"
          },
          "percentage": {
            "type": "number",
            "description": "Specifies a percentage to apply for the gratuity or service charge",
            "format": "double",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Specifies a flat amount to apply for the gratuity or service charge",
            "format": "double",
            "nullable": true
          },
          "gratuityText": {
            "type": "string",
            "description": "Designates the descriptive text to print on the guest check",
            "nullable": true
          },
          "forceAutomaticGratuity": {
            "type": "boolean",
            "description": "If true, automatically applies the gratuity to guest checks"
          },
          "minimumNumberOfGuestsBeforeTax": {
            "type": "integer",
            "description": "Specifies the minimum number of guests required at the table before applying a tax on the gratuity",
            "nullable": true
          },
          "revenueCenterIds": {
            "type": "array",
            "description": "Specifies which revenue centers explicitly include this gratuity.",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "MenuData": {
        "type": "object",
        "description": "Collection of multiple SubMenu. They are typically created \nfor a different times of the day, such as breakfast, lunch, and \ndinner, or for different job positions, such as bartender and server.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique identifier of menu.",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "description": "Record display name that should be displayed to the end user.",
            "nullable": true
          },
          "longName": {
            "type": "string",
            "description": "Menu description.",
            "nullable": true
          },
          "activeModifierCodes": {
            "type": "array",
            "description": "Active modifier codes",
            "items": {
              "$ref": "#/components/schemas/ModifierCodeData"
            }
          },
          "subMenus": {
            "type": "array",
            "description": "Collection of root sub menus.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SubmenuData"
            }
          }
        }
      },
      "ModifierCodeData": {
        "type": "object",
        "description": "Modifier codes allow to communicate more information about a modifier to the kitchen staff",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of modifier code"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of modifier code.",
            "nullable": true
          },
          "indicator": {
            "type": "string",
            "description": "Indicator of modifier code.",
            "nullable": true
          }
        }
      },
      "SubmenuData": {
        "type": "object",
        "description": "Logical groupings based on the menu of a restaurant.",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of subMenu"
          },
          "shortName": {
            "type": "string",
            "description": "Display name that should be displayed to the end user.",
            "nullable": true
          },
          "longName": {
            "type": "string",
            "description": "Submenu description",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "Submenu button image URL address\n!!!NOT IMPLEMENTED!!!",
            "nullable": true
          },
          "modifierGroupId": {
            "type": "integer",
            "description": "Ref to exception(submenu level) modifier group that is applied to all sales items in a submenu.",
            "nullable": true
          },
          "positionNumber": {
            "type": "integer",
            "description": "Position on the list of submenus.",
            "nullable": true
          },
          "panelId": {
            "type": "integer",
            "description": "Default or Custom panel to be displayed on Order entry screen, see PanelViewData schema.",
            "nullable": true
          },
          "childSubmenus": {
            "type": "array",
            "description": "Collection of child Submenus.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SubmenuData"
            }
          },
          "menuItems": {
            "type": "array",
            "description": "Collection of menu items used in Submenu.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MenuItemData"
            }
          }
        }
      },
      "MenuItemData": {
        "type": "object",
        "description": "Menu item represents sales item in Menu and contains a link to sales item.",
        "additionalProperties": false,
        "properties": {
          "price": {
            "type": "number",
            "description": "The actual computed price, taking into account pricing method and price change events, BOH price adjustments and etc.",
            "format": "double",
            "nullable": true
          },
          "salesItemId": {
            "type": "integer",
            "description": "Ref to default sales item.",
            "nullable": true
          },
          "positionNumber": {
            "type": "integer",
            "description": "Position on the grid of submenu menu items. \nGrid positioning starts from top to bottom, then next columns, then next page.",
            "nullable": true
          }
        }
      },
      "SalesItemData": {
        "type": "object",
        "description": "Sales items are used to make a real order.Retail items, modifier items \nthat are the building blocks for menu item.",
        "additionalProperties": false,
        "properties": {
          "salesItemModifierGroups": {
            "type": "array",
            "description": "Modifier groups that can modify this item.",
            "items": {
              "$ref": "#/components/schemas/SalesItemModifierGroupData"
            }
          },
          "salesItemCategoryIds": {
            "type": "array",
            "description": "Categories that this sales item belongs to.",
            "items": {
              "type": "integer"
            }
          },
          "id": {
            "type": "integer",
            "description": "Id of sales item"
          },
          "shortName": {
            "type": "string",
            "description": "Display name that should be displayed to the end user.",
            "nullable": true
          },
          "longName": {
            "type": "string",
            "description": "Sales item description",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The actual computed price, taking into account pricing method and price change events, BOH price adjustments and etc.",
            "format": "double",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "Menu item button image URL address\n!!!NOT IMPLEMENTED!!!",
            "nullable": true
          },
          "consolidateFirstModifierGroup": {
            "type": "boolean",
            "description": "To print and consolidate modifiers based on the first modifier group of the item.\nThis option is available for the Standard item type only."
          },
          "quantityPrice": {
            "description": "Quantity Price enables to price an item by quantity or weight",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/QuantityPriceData"
              }
            ]
          },
          "combinePriceWithRoot": {
            "type": "boolean",
            "description": "If True, the price of the modifier should be included in root sales item. Otherwise false."
          },
          "shouldAskForDescription": {
            "type": "boolean",
            "description": "Enable editable/adjustable description"
          },
          "shouldAskForPrice": {
            "type": "boolean",
            "description": "Enable editable/adjustable price"
          }
        }
      },
      "SalesItemModifierGroupData": {
        "type": "object",
        "description": "Represents modifier group for sales item and contains a link to modifier group.",
        "additionalProperties": false,
        "properties": {
          "includedItems": {
            "type": "array",
            "description": "Collection of included items on current modifier group.",
            "items": {
              "$ref": "#/components/schemas/IncludedModifierGroupItemData"
            }
          },
          "modifierGroupId": {
            "type": "integer",
            "description": "Ref to modifier group."
          },
          "positionNumber": {
            "type": "integer",
            "description": "Position on the list of modifier groups.",
            "nullable": true
          }
        }
      },
      "IncludedModifierGroupItemData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "salesItemId": {
            "type": "integer",
            "description": "Ref to modifier (sales) item."
          },
          "positionNumber": {
            "type": "integer",
            "description": "Position on the list of included modifiers.",
            "nullable": true
          },
          "isImplied": {
            "type": "boolean",
            "description": "Is automatically included with item (for entry/check included modifiers)"
          }
        }
      },
      "QuantityPriceData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer"
          },
          "itemId": {
            "type": "integer"
          },
          "tareId": {
            "type": "integer"
          },
          "unitName": {
            "type": "string"
          },
          "unitPrecision": {
            "type": "integer",
            "format": "int32"
          },
          "pricePerUnit": {
            "type": "number",
            "format": "double"
          },
          "storeAccess": {
            "type": "integer"
          },
          "parentAccess": {
            "type": "integer"
          },
          "affectsInventory": {
            "type": "boolean"
          },
          "shouldApplyQuantityToModifiers": {
            "type": "boolean"
          }
        }
      },
      "ModifierGroupData": {
        "type": "object",
        "description": "Modifiers are groups of items used to extend, alter, or further define menu items. \nModifier groups have a circular relationship to items in that they are composed of items \ndefined in the Items file, grouped into a modifier group, and then assigned to an item.",
        "additionalProperties": false,
        "properties": {
          "modifierGroupItems": {
            "type": "array",
            "description": "Modifier group (sales)items.",
            "items": {
              "$ref": "#/components/schemas/ModifierGroupItemData"
            }
          },
          "id": {
            "type": "integer",
            "description": "Id of modifier group.\nNote: Modifier group Ids range from 10000 to 19999, \nwhereas Exception(Submenu level) modifier group Ids range from 20000 to 29999."
          },
          "shortName": {
            "type": "string",
            "description": "Abbreviated name for the modifier group.",
            "nullable": true
          },
          "longName": {
            "type": "string",
            "description": "Formal, more descriptive name of the item.",
            "nullable": true
          },
          "minItemsCount": {
            "type": "integer",
            "description": "Specifies the minimum number of modifiers that you can select when a customer orders an item.",
            "nullable": true
          },
          "maxItemsCount": {
            "type": "integer",
            "description": "Specifies the maximum number of modifiers that you can select when \na customer orders an item. If both \"Minimum\" and \"Maximum\" are 0 (zero), \nthe Aloha POS system assumes an unlimited number.",
            "nullable": true
          },
          "freeItemsCount": {
            "type": "integer",
            "description": "Specifies the number of items from the modifier group the customer can order at no charge.",
            "nullable": true
          },
          "substitutionGroupId": {
            "type": "integer",
            "description": "Ref to modifier group that contains items you can substitute for \nthe items listed in the current modifier group.",
            "nullable": true
          },
          "isFlowRequired": {
            "type": "boolean",
            "description": "Forces the order entry terminal to automatically open the Modifier Group screen.",
            "nullable": true
          },
          "isRefill": {
            "type": "boolean",
            "description": "Enables the modifier group to allow refills of the menu item.",
            "nullable": true
          },
          "refillIndicator": {
            "type": "string",
            "description": "Shows up to three alphanumeric characters on the kitchen chit to indicate the item is a refill, such as REF.",
            "nullable": true
          },
          "maxRefillsCount": {
            "type": "integer",
            "description": "Indicates the maximum number of times, from 1 to 99, you can modify \nthe menu item and order a refill before the manager approval screen appears.",
            "nullable": true
          },
          "type": {
            "description": "Type of Modifier Group:\n1. Standard represents a grouping of standard items from which a guest can choose to modify a menu item.\n2. Build represents a grouping of the item types you designate as build items, \n   from which a guest can choose to modify a menu item.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ModifierGroupType"
              }
            ]
          },
          "hideSpecialMessageButton": {
            "type": "boolean",
            "description": "Hides the button to prevent access to the Enter Special Message screen \nand reduce unnecessary communication to the kitchen staff.",
            "nullable": true
          },
          "showRequiredModifierCountdown": {
            "type": "boolean",
            "description": "Controls display of \"Required Modifier Count\" text on modifier group button. Only For TS.",
            "nullable": true
          },
          "hideModifierPrice": {
            "type": "boolean",
            "description": "Controls if Modifier button will show price or not. Only For TS.",
            "nullable": true
          },
          "suppressModifierScreen": {
            "type": "boolean",
            "description": "Prevents the system from showing the hard-coded classic modifier screen when \nthe modifier group has one or more minimum required modifiers, as defined in \"Minimum\".",
            "nullable": true
          },
          "bindingLevel": {
            "description": "Binding level in menu:\n1. SALES_ITEM - modifier group is tied with a sales item.\n2. SUBMENU - exception(submenu level) modifier group is more general and is applied to all sales items in a submenu.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ModifierGroupBindingLevel"
              }
            ]
          },
          "panelId": {
            "type": "integer",
            "description": "Default or Custom panel to be displayed on Modifier screen, see PanelViewData schema.",
            "nullable": true
          }
        }
      },
      "ModifierGroupItemData": {
        "type": "object",
        "description": "Modifier group item that belong to some modifier group \nand contains a reference to sales item. ",
        "additionalProperties": false,
        "properties": {
          "salesItemId": {
            "type": "integer",
            "description": "Ref to sales item"
          },
          "price": {
            "type": "number",
            "description": "The actual computed price, taking into account pricing method and price change events, BOH price adjustments and etc.",
            "format": "double",
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "description": "Weight of the modifier item.",
            "format": "int32",
            "nullable": true
          },
          "notEligibleForSubstitution": {
            "type": "boolean",
            "description": "Specifies current modifier item cannot be substituted for an included modifier.",
            "nullable": true
          },
          "positionNumber": {
            "type": "integer",
            "description": "Position on the list of modifier group items.",
            "nullable": true
          }
        }
      },
      "ModifierGroupType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "STANDARD",
          "BUILD"
        ],
        "enum": [
          "STANDARD",
          "BUILD"
        ]
      },
      "ModifierGroupBindingLevel": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "SALES_ITEM",
          "SUBMENU"
        ],
        "enum": [
          "SALES_ITEM",
          "SUBMENU"
        ]
      },
      "OrderModeViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Order mode ID."
          },
          "name": {
            "type": "string",
            "description": "Order mode name."
          },
          "indicator": {
            "type": "string",
            "description": "Order mode Indicator"
          },
          "active": {
            "type": "boolean",
            "description": "True if order mode is active. Otherwise false."
          },
          "serviceChargeLineText": {
            "type": "string",
            "description": "Specifies the text to appear next to the service charge amount on the guest check. For example, type ‘Delivery Fee’ for the service charge being added to ‘To Go’ orders."
          },
          "assignOrderModeTo": {
            "description": "Field unifies the CFC settings \"Apply to all unordered items\" and \"Apply to ordered items\"",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ForceOrder"
              }
            ]
          },
          "cashTenderRequiresManagerApprovalTreshold": {
            "type": "number",
            "description": "The treshold above which a cash tender will require manager approval.",
            "format": "double"
          },
          "restrictedToCategoryId": {
            "type": "integer",
            "description": "Category of included or excluded items - see RestrictionType for details.\nIf set, this order mode can either be assigned only to items from that category\nor to all but that category depending on restriction type.",
            "nullable": true
          },
          "restrictionType": {
            "description": "Determines the restriction type for RestrictedToCategoryId.\nWhen INCLUDE, order mode can be assigned only to items from restricted category.\nWhen EXCLUDE, order mode can't be assigned to items from restricted category.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RestrictionType"
              }
            ]
          }
        }
      },
      "ForceOrder": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NONE",
          "UNORDERED_ITEMS",
          "ALL_ITEMS"
        ],
        "enum": [
          "NONE",
          "UNORDERED_ITEMS",
          "ALL_ITEMS"
        ]
      },
      "RestrictionType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "EXCLUDE",
          "INCLUDE"
        ],
        "enum": [
          "EXCLUDE",
          "INCLUDE"
        ]
      },
      "PanelViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the panel."
          },
          "title": {
            "type": "string",
            "description": "Title of the panel."
          },
          "positionCoordinates": {
            "description": "Panel's position and size.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PositionCoordinates"
              }
            ]
          },
          "backgroundImageUrl": {
            "type": "string",
            "description": "Panel's background image URL.",
            "nullable": true
          },
          "backgroundImagePosition": {
            "description": "Position of the background image.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ElementPositions"
              }
            ]
          },
          "type": {
            "description": "Panel's type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PanelTypes"
              }
            ]
          },
          "backgroundColor": {
            "description": "Background color of the panel.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Color"
              }
            ]
          },
          "isSeatVisible": {
            "type": "boolean",
            "description": "True if seats around the table are visible. Otherwise, false."
          },
          "seatWidth": {
            "type": "integer",
            "description": "Seats width. If IsSeatVisible is false, SeatWidth is null.",
            "format": "int32",
            "nullable": true
          },
          "isBackgroundImageTransparent": {
            "type": "boolean",
            "description": "True, if the background image is transparent. Null, if BackgroundImageUrl is null. Otherwise, false.",
            "nullable": true
          },
          "buttons": {
            "type": "array",
            "description": "List of buttons on the panel.",
            "items": {
              "$ref": "#/components/schemas/ButtonViewData"
            }
          }
        }
      },
      "PositionCoordinates": {
        "type": "object",
        "description": "Describes the width, height, and location of an element.",
        "additionalProperties": false,
        "properties": {
          "x": {
            "type": "integer",
            "description": "X-axis value.",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "description": "Y-axis value.",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "description": "Width of the rectangle.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Height of the rectangle.",
            "format": "int32"
          }
        }
      },
      "ElementPositions": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "MIDDLE_CENTER",
          "MIDDLE_LEFT",
          "MIDDLE_RIGHT",
          "TOP_CENTER",
          "TOP_LEFT",
          "TOP_RIGHT",
          "BOTTOM_CENTER",
          "BOTTOM_LEFT",
          "BOTTOM_RIGHT"
        ],
        "enum": [
          "MIDDLE_CENTER",
          "MIDDLE_LEFT",
          "MIDDLE_RIGHT",
          "TOP_CENTER",
          "TOP_LEFT",
          "TOP_RIGHT",
          "BOTTOM_CENTER",
          "BOTTOM_LEFT",
          "BOTTOM_RIGHT"
        ]
      },
      "PanelTypes": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "GENERAL_PANEL",
          "QUICK_SERVICE_ORDER",
          "QUICK_SERVICE_ORDER_QUEUE",
          "QUICK_SERVICE_REVIEW_ORDER",
          "TABLE_SERVICE_ORDER_ENTRY",
          "TABLE_SERVICE_SMART_SUBMENU",
          "TABLE_SERVICE_MODIFIER",
          "DASHBOARD",
          "TABLE_SERVICE_CLOSE_SCREEN"
        ],
        "enum": [
          "GENERAL_PANEL",
          "QUICK_SERVICE_ORDER",
          "QUICK_SERVICE_ORDER_QUEUE",
          "QUICK_SERVICE_REVIEW_ORDER",
          "TABLE_SERVICE_ORDER_ENTRY",
          "TABLE_SERVICE_SMART_SUBMENU",
          "TABLE_SERVICE_MODIFIER",
          "DASHBOARD",
          "TABLE_SERVICE_CLOSE_SCREEN"
        ]
      },
      "Color": {
        "type": "object",
        "description": "RGB color.",
        "additionalProperties": false,
        "properties": {
          "red": {
            "type": "integer",
            "description": "Red part of the color.",
            "format": "int32"
          },
          "green": {
            "type": "integer",
            "description": "Green part of the color.",
            "format": "int32"
          },
          "blue": {
            "type": "integer",
            "description": "Blue part of the color.",
            "format": "int32"
          }
        }
      },
      "ButtonViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the button."
          },
          "positionCoordinates": {
            "description": "Panel's position and size.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PositionCoordinates"
              }
            ]
          },
          "text": {
            "type": "string",
            "description": "Button's text.",
            "nullable": true
          },
          "textSize": {
            "type": "integer",
            "description": "Size of the button's text.",
            "format": "int32",
            "nullable": true
          },
          "textColor": {
            "description": "Color of the button's text.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Color"
              }
            ]
          },
          "backgroundImageUrl": {
            "type": "string",
            "description": "Button's background image URL.",
            "nullable": true
          },
          "backgroundColor": {
            "description": "Background color of the button.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Color"
              }
            ]
          },
          "functionType": {
            "description": "Button's function type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ButtonFunctionTypes"
              }
            ]
          },
          "functionParams": {
            "type": "array",
            "description": "Function's parameters.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ButtonFunctionTypes": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NONE",
          "ADD_CHECK",
          "CHANGE_PASSWORD",
          "CHECK_AREA",
          "CLEAR",
          "CLEAR_PASSWORD",
          "CLOCK_OUT",
          "CLOSE_PANELS",
          "COMP",
          "DELETE",
          "DISPLAY",
          "END_OF_DAY",
          "EXECUTE_SCRIPT",
          "EXIT",
          "GUEST_COUNT",
          "INFO",
          "MODIFIER_CODE",
          "MODIFY",
          "NEW_ORDER",
          "OPEN_PANELS",
          "ORDER_GIFT_CERTIFICATE",
          "ORDER_ITEM",
          "ORDER_MODIFIER",
          "ORDER_TYPE",
          "PRINT_RECEIPT",
          "PROMO",
          "QUANTITY",
          "RECALL",
          "RECALL_NEXT",
          "RECALL_NEXT_OPEN",
          "RECALL_PREVIOUS",
          "REPEAT",
          "REROUTE_PRINTER",
          "REROUTE_PRINTER_GROUP",
          "REROUTE_VIDEO",
          "SEND",
          "SPLIT_CHECK",
          "STORE",
          "STORE_FIRST",
          "TAX_EXEMPT",
          "TENDER",
          "TOTAL",
          "MANAGE_DRAWERS",
          "SMART_ITEM",
          "SMART_SELECT",
          "CHECK_OUT",
          "MANAGER_CHECKOUT",
          "REPORT_RESTAURANT_SALES",
          "REPORT_RESTAURANT_LABOR",
          "REPORT_FLASH",
          "REPORT_PRODUCT_MIX",
          "PRE_REPORT",
          "CLOSE_CHECK",
          "REROUTE_VIDEO_GROUP",
          "ROUTING_LEVEL",
          "TRAINING",
          "VOLUME_LEVEL",
          "VOLUME_REPORT",
          "QUICK_COMBO",
          "QUICK_COMBO_LEVEL",
          "REFUND",
          "PRINT_CHECKOUT",
          "REOPEN_CHECK",
          "DELIVERY",
          "NAME_ORDER",
          "FORCE_TENDER",
          "ASSIGN_DRAWER",
          "ADJUST_TENDER",
          "ASSIGN_QUEUE",
          "OPEN_DRAWER",
          "EMPLOYEE_SALES_REPORT",
          "ASSIGN_DRIVER",
          "BOH_REPORT",
          "CALIBRATE",
          "EDIT_TIME",
          "DELETE_CHECKOUT",
          "SHUTDOWN",
          "QUICK_COUNT",
          "ITEM_LOOKUP",
          "REPORT_QUICK_COUNT",
          "BREAK",
          "EDIT_BREAK",
          "PLAY_VIDEO",
          "ALLOW_CLOCK_IN",
          "DISABLE_SCHEDULER",
          "SERVER_SALES",
          "RUN",
          "DELETE_CLOCKOUT",
          "DELETE_ALL_ITEMS",
          "PMS_INQUIRE",
          "BREAK_IN_OUT",
          "CLOCK_IN_OUT",
          "REPORT_DAILY_SUMMARY",
          "ADJUST_TIPS",
          "REPORT_PREP_PROJECTIONS",
          "PLU_LIST",
          "MANAGE_DELIVERY_DRIVERS",
          "MANAGE_DELIVERY_ORDERS",
          "SIGN_IN_OUT",
          "CUSTOMER_INFO",
          "DELIVERY_INFO",
          "SELF_ASSIGN_ORDERS",
          "PROMO_LOOKUP",
          "KODIAK_ENTRY",
          "KODIAK_EXIT",
          "QUERY_CASH_CARD",
          "ADD_CASH_CARD_BALANCE",
          "EJECT_CASH_CARD",
          "CHANGE_SIZE",
          "CUSTOMER_REWARD_REPORT",
          "BUMP_VIDEO_ORDER",
          "GET_CHECK",
          "ASSIGN_PEN_IDS",
          "REVIEW_NEXT",
          "REVIEW_PREVIOUS",
          "REVIEW_LOCK",
          "DELIVERY_TS",
          "TABLE",
          "WALL",
          "BITMAP",
          "AUTOMATION_SCRIPT",
          "COMBINE_TABLES",
          "DETACH_TABLES",
          "ADJUST_PAYMENTS",
          "SALES_SUMMARY",
          "PMS_CHECK",
          "WWT_SCREEN",
          "VIEW_TABLES_MODE",
          "TRANSFER_TABLES",
          "SPECIAL_FUNCTIONS",
          "COMBINE_ORDER",
          "RFID_PAYMENT",
          "OTHER_WAGES",
          "CHECK_INFO",
          "ASSIGN_DAY_PART",
          "PRINT_GST_TAX_INVOICE",
          "THUMB_SCANNER_ENROLL",
          "CUSTOM_ACTIVITY",
          "HOLD",
          "RECIPE",
          "REPRINT_CHECK",
          "REROUTE_DISPLAY_BOARD",
          "DISPLAY_ORDER_TOTAL",
          "QUERY_GIFT_CARD_BALANCE",
          "NEXT_SEAT",
          "ADVANCE_ORDERS",
          "MANAGE_ADVANCE_ORDERS",
          "DISPENSE_TOKENS",
          "JIT_MGR_APPROVAL",
          "RELEASE_LOCKED_EMPLOYEE",
          "DRAWER_CHECKOUT",
          "ALLOW_CLOCK_OUT",
          "BREAK_ALERT_REPORT",
          "EMPLOYEE_BREAK_REPORT",
          "COURSE",
          "NEW_TAB",
          "QUICK_COMBO_TOGGLE",
          "SUSPEND_ITEMS_TOGGLE",
          "CHANGE_SEAT_NAME",
          "SMART_ITEM_TS",
          "ORDER_ITEM_TS",
          "PLU_LIST_TS",
          "SMART_SELECT_TS",
          "SYSTEM_MONITOR",
          "OPEN_PANELS_TS",
          "MODIFIER_CODE_TS",
          "ORDER_MODIFIER_TS",
          "GET_STORED_CC",
          "QUICK_REFUND",
          "REPRINT_CC_VOUCHER",
          "DYNAMIC_SUBSTITUTE",
          "DYNAMIC_INCLUDED_MODIFIER",
          "ASSIGN_PRICE_CHANGE",
          "QUEBEC_FISCAL_PRINTING",
          "ELECTRONIC_BENEFIT_TRANSFER",
          "ASSIGN_MENU",
          "FRACTION",
          "VIEW_SCHEDULE",
          "RESEND_TO_KITCHEN",
          "FORGOTTEN_LOYALTY_CARD",
          "DYNAMIC_TEXT",
          "CUSTOM_REPORT",
          "ITEM_AVAILABILITY",
          "PRINT_ITEM_AVAILABILITY",
          "ALERTS",
          "RESTAURANT_SALES_AND_LABOR_STATISTICS",
          "REORDER_FAMILY_STYLE_ITEM",
          "ALTERNATE_LANGUAGE_GC_RECEIPT",
          "SWIPE_DEBIT_CREDIT",
          "CLEAR_MODIFIERS",
          "COUNT",
          "SPECIAL_MESSAGE",
          "SUB_MENU",
          "ADD_BREAK",
          "REPORT_SPEED_OF_SERVICE",
          "SERVED_ORDER",
          "UNDO_MODIFICATIONS",
          "GROUP_COMBO",
          "RESEND_FAILED_CREDIT_CARD",
          "RENAME_TABS_AND_TABLES",
          "AUTO_DETECT_CREDIT_CARD",
          "EDIT_PRICE_CHANGE_EVENTS",
          "DASHBOARD",
          "TIME",
          "DATE",
          "CURRENT_DAY_PART",
          "GUEST_CHECK_COUNT",
          "AVERAGE_GUEST_CHECK",
          "AVERAGE_TABLE_TURN",
          "SALES",
          "LABOR_PERCENTAGE",
          "EMPLOYEE_CONTEST",
          "DASHBOARD_ITEM_AVAILABILITY",
          "SALES_AND_LABOR",
          "APPROACHING_OVERTIME",
          "TABLE_TURN_BY_EMPLOYEE",
          "EMPLOYEE_DISCOUNTS_COMPS_VOIDS_AND_REFUNDS",
          "SALES_PER_MAN_HOUR",
          "SPEED_OF_SERVICE",
          "SALES_BY_ORDER_MODE",
          "DISABLE_ENABLE_EMPLOYEE_MAGNETIC_CARD",
          "LOGIN",
          "CLOSE",
          "BACK",
          "MANAGE_SELF_BANKING",
          "QUERY_CAMPUS_CARD_BALANCE",
          "REQUIRED_MODIFIER_COUNTDOWN",
          "PRINT_MESSAGE",
          "ADD_EDIT_GRATUITY",
          "EQUAL_PAY",
          "SURCHARGE_FUNCTIONALITY",
          "GIFT_CARD_CASH_OUT"
        ],
        "enum": [
          "NONE",
          "ADD_CHECK",
          "CHANGE_PASSWORD",
          "CHECK_AREA",
          "CLEAR",
          "CLEAR_PASSWORD",
          "CLOCK_OUT",
          "CLOSE_PANELS",
          "COMP",
          "DELETE",
          "DISPLAY",
          "END_OF_DAY",
          "EXECUTE_SCRIPT",
          "EXIT",
          "GUEST_COUNT",
          "INFO",
          "MODIFIER_CODE",
          "MODIFY",
          "NEW_ORDER",
          "OPEN_PANELS",
          "ORDER_GIFT_CERTIFICATE",
          "ORDER_ITEM",
          "ORDER_MODIFIER",
          "ORDER_TYPE",
          "PRINT_RECEIPT",
          "PROMO",
          "QUANTITY",
          "RECALL",
          "RECALL_NEXT",
          "RECALL_NEXT_OPEN",
          "RECALL_PREVIOUS",
          "REPEAT",
          "REROUTE_PRINTER",
          "REROUTE_PRINTER_GROUP",
          "REROUTE_VIDEO",
          "SEND",
          "SPLIT_CHECK",
          "STORE",
          "STORE_FIRST",
          "TAX_EXEMPT",
          "TENDER",
          "TOTAL",
          "MANAGE_DRAWERS",
          "SMART_ITEM",
          "SMART_SELECT",
          "CHECK_OUT",
          "MANAGER_CHECKOUT",
          "REPORT_RESTAURANT_SALES",
          "REPORT_RESTAURANT_LABOR",
          "REPORT_FLASH",
          "REPORT_PRODUCT_MIX",
          "PRE_REPORT",
          "CLOSE_CHECK",
          "REROUTE_VIDEO_GROUP",
          "ROUTING_LEVEL",
          "TRAINING",
          "VOLUME_LEVEL",
          "VOLUME_REPORT",
          "QUICK_COMBO",
          "QUICK_COMBO_LEVEL",
          "REFUND",
          "PRINT_CHECKOUT",
          "REOPEN_CHECK",
          "DELIVERY",
          "NAME_ORDER",
          "FORCE_TENDER",
          "ASSIGN_DRAWER",
          "ADJUST_TENDER",
          "ASSIGN_QUEUE",
          "OPEN_DRAWER",
          "EMPLOYEE_SALES_REPORT",
          "ASSIGN_DRIVER",
          "BOH_REPORT",
          "CALIBRATE",
          "EDIT_TIME",
          "DELETE_CHECKOUT",
          "SHUTDOWN",
          "QUICK_COUNT",
          "ITEM_LOOKUP",
          "REPORT_QUICK_COUNT",
          "BREAK",
          "EDIT_BREAK",
          "PLAY_VIDEO",
          "ALLOW_CLOCK_IN",
          "DISABLE_SCHEDULER",
          "SERVER_SALES",
          "RUN",
          "DELETE_CLOCKOUT",
          "DELETE_ALL_ITEMS",
          "PMS_INQUIRE",
          "BREAK_IN_OUT",
          "CLOCK_IN_OUT",
          "REPORT_DAILY_SUMMARY",
          "ADJUST_TIPS",
          "REPORT_PREP_PROJECTIONS",
          "PLU_LIST",
          "MANAGE_DELIVERY_DRIVERS",
          "MANAGE_DELIVERY_ORDERS",
          "SIGN_IN_OUT",
          "CUSTOMER_INFO",
          "DELIVERY_INFO",
          "SELF_ASSIGN_ORDERS",
          "PROMO_LOOKUP",
          "KODIAK_ENTRY",
          "KODIAK_EXIT",
          "QUERY_CASH_CARD",
          "ADD_CASH_CARD_BALANCE",
          "EJECT_CASH_CARD",
          "CHANGE_SIZE",
          "CUSTOMER_REWARD_REPORT",
          "BUMP_VIDEO_ORDER",
          "GET_CHECK",
          "ASSIGN_PEN_IDS",
          "REVIEW_NEXT",
          "REVIEW_PREVIOUS",
          "REVIEW_LOCK",
          "DELIVERY_TS",
          "TABLE",
          "WALL",
          "BITMAP",
          "AUTOMATION_SCRIPT",
          "COMBINE_TABLES",
          "DETACH_TABLES",
          "ADJUST_PAYMENTS",
          "SALES_SUMMARY",
          "PMS_CHECK",
          "WWT_SCREEN",
          "VIEW_TABLES_MODE",
          "TRANSFER_TABLES",
          "SPECIAL_FUNCTIONS",
          "COMBINE_ORDER",
          "RFID_PAYMENT",
          "OTHER_WAGES",
          "CHECK_INFO",
          "ASSIGN_DAY_PART",
          "PRINT_GST_TAX_INVOICE",
          "THUMB_SCANNER_ENROLL",
          "CUSTOM_ACTIVITY",
          "HOLD",
          "RECIPE",
          "REPRINT_CHECK",
          "REROUTE_DISPLAY_BOARD",
          "DISPLAY_ORDER_TOTAL",
          "QUERY_GIFT_CARD_BALANCE",
          "NEXT_SEAT",
          "ADVANCE_ORDERS",
          "MANAGE_ADVANCE_ORDERS",
          "DISPENSE_TOKENS",
          "JIT_MGR_APPROVAL",
          "RELEASE_LOCKED_EMPLOYEE",
          "DRAWER_CHECKOUT",
          "ALLOW_CLOCK_OUT",
          "BREAK_ALERT_REPORT",
          "EMPLOYEE_BREAK_REPORT",
          "COURSE",
          "NEW_TAB",
          "QUICK_COMBO_TOGGLE",
          "SUSPEND_ITEMS_TOGGLE",
          "CHANGE_SEAT_NAME",
          "SMART_ITEM_TS",
          "ORDER_ITEM_TS",
          "PLU_LIST_TS",
          "SMART_SELECT_TS",
          "SYSTEM_MONITOR",
          "OPEN_PANELS_TS",
          "MODIFIER_CODE_TS",
          "ORDER_MODIFIER_TS",
          "GET_STORED_CC",
          "QUICK_REFUND",
          "REPRINT_CC_VOUCHER",
          "DYNAMIC_SUBSTITUTE",
          "DYNAMIC_INCLUDED_MODIFIER",
          "ASSIGN_PRICE_CHANGE",
          "QUEBEC_FISCAL_PRINTING",
          "ELECTRONIC_BENEFIT_TRANSFER",
          "ASSIGN_MENU",
          "FRACTION",
          "VIEW_SCHEDULE",
          "RESEND_TO_KITCHEN",
          "FORGOTTEN_LOYALTY_CARD",
          "DYNAMIC_TEXT",
          "CUSTOM_REPORT",
          "ITEM_AVAILABILITY",
          "PRINT_ITEM_AVAILABILITY",
          "ALERTS",
          "RESTAURANT_SALES_AND_LABOR_STATISTICS",
          "REORDER_FAMILY_STYLE_ITEM",
          "ALTERNATE_LANGUAGE_GC_RECEIPT",
          "SWIPE_DEBIT_CREDIT",
          "CLEAR_MODIFIERS",
          "COUNT",
          "SPECIAL_MESSAGE",
          "SUB_MENU",
          "ADD_BREAK",
          "REPORT_SPEED_OF_SERVICE",
          "SERVED_ORDER",
          "UNDO_MODIFICATIONS",
          "GROUP_COMBO",
          "RESEND_FAILED_CREDIT_CARD",
          "RENAME_TABS_AND_TABLES",
          "AUTO_DETECT_CREDIT_CARD",
          "EDIT_PRICE_CHANGE_EVENTS",
          "DASHBOARD",
          "TIME",
          "DATE",
          "CURRENT_DAY_PART",
          "GUEST_CHECK_COUNT",
          "AVERAGE_GUEST_CHECK",
          "AVERAGE_TABLE_TURN",
          "SALES",
          "LABOR_PERCENTAGE",
          "EMPLOYEE_CONTEST",
          "DASHBOARD_ITEM_AVAILABILITY",
          "SALES_AND_LABOR",
          "APPROACHING_OVERTIME",
          "TABLE_TURN_BY_EMPLOYEE",
          "EMPLOYEE_DISCOUNTS_COMPS_VOIDS_AND_REFUNDS",
          "SALES_PER_MAN_HOUR",
          "SPEED_OF_SERVICE",
          "SALES_BY_ORDER_MODE",
          "DISABLE_ENABLE_EMPLOYEE_MAGNETIC_CARD",
          "LOGIN",
          "CLOSE",
          "BACK",
          "MANAGE_SELF_BANKING",
          "QUERY_CAMPUS_CARD_BALANCE",
          "REQUIRED_MODIFIER_COUNTDOWN",
          "PRINT_MESSAGE",
          "ADD_EDIT_GRATUITY",
          "EQUAL_PAY",
          "SURCHARGE_FUNCTIONALITY",
          "GIFT_CARD_CASH_OUT"
        ]
      },
      "PrinterViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Printer id"
          },
          "name": {
            "type": "string",
            "description": "Printer name"
          },
          "terminalId": {
            "type": "integer",
            "description": "Printer terminal id",
            "nullable": true
          }
        }
      },
      "PromoViewData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "maximumDiscount"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the promo."
          },
          "name": {
            "type": "string",
            "description": "Display name of the promo.",
            "nullable": true
          },
          "promoType": {
            "description": "Promotion kind.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromoKindEnum"
              }
            ]
          },
          "maximumDiscount": {
            "type": "number",
            "description": "Maximum discount.",
            "format": "decimal"
          },
          "validationCodeConfiguration": {
            "description": "Promo validation code when you want add promo to the check.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromoValidationCodeConfigData"
              }
            ]
          },
          "couponConfiguration": {
            "description": "Promotion detailed coupon configuration.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromoCouponConfigData"
              }
            ]
          },
          "bogoConfiguration": {
            "description": "Promotion detailed bogo configuration.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromoBogoConfigData"
              }
            ]
          },
          "positionNumber": {
            "type": "integer",
            "description": "Promo position. Positioning starts from top to bottom, if it is grid continues wtih next columns, then next page.",
            "nullable": true
          }
        }
      },
      "PromoKindEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "UNDEFINED",
          "BOGO",
          "COMBO",
          "COUPON",
          "NEWPRICE",
          "REDUX",
          "QCOMBO",
          "PACKAGE",
          "GROUPCOMBO"
        ],
        "enum": [
          "UNDEFINED",
          "BOGO",
          "COMBO",
          "COUPON",
          "NEWPRICE",
          "REDUX",
          "QCOMBO",
          "PACKAGE",
          "GROUPCOMBO"
        ]
      },
      "PromoValidationCodeConfigData": {
        "type": "object",
        "description": "Promo validation code when you want add promo to the check",
        "additionalProperties": false,
        "properties": {
          "isRequired": {
            "type": "boolean",
            "description": "Is validation code required."
          },
          "isNumeric": {
            "type": "boolean",
            "description": "Is validation code numeric",
            "nullable": true
          },
          "requiredLength": {
            "type": "integer",
            "description": "Required length for validation code",
            "nullable": true
          }
        }
      },
      "PromoCouponConfigData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "promoCouponCalculationMethod": {
            "description": "Indicates how the system calculates the value of the coupon.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromoCouponCalculationMethod"
              }
            ]
          },
          "promoCouponItemSelectionMethod": {
            "description": "It set what king od item selecting will be used.\nTwo are automatic, one manual.\nManual setting enable selecting items if it is possible.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromoCouponItemSelectionMethod"
              }
            ]
          },
          "calculateByPercent": {
            "type": "boolean",
            "description": "Enables/Disable if discount will be applied as amount or percentage.\nFrom 1AUI perspective it is used for showing $ if false or % if true.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Specifies the amount which can be applied as discount per one Coupon.",
            "format": "double",
            "nullable": true
          },
          "itemCountLimit": {
            "type": "integer",
            "description": "Limit of items which can be applied at one check. 0 = unlimited.",
            "format": "int32",
            "nullable": true
          },
          "mustIncludeItemsCategoryId": {
            "type": "integer",
            "description": "Restricts the category for Coupon eligibility.",
            "nullable": true
          },
          "mustIncludeItemsCount": {
            "type": "integer",
            "description": "Minimums items from mustIncludeItemsCategoryId. It is enabled only if mustIncludeItemsCategoryId is sent.",
            "format": "int32",
            "nullable": true
          },
          "discountableItemsCategories": {
            "description": "Promotions discountable categories.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromoDiscountableCategories"
              }
            ]
          }
        }
      },
      "PromoCouponCalculationMethod": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "FIXED_AMOUNT",
          "FIXED_PERCENT",
          "PROMPT_FOR_AMOUNT",
          "PROMT_FOR_PERCENT",
          "ITEM_BY_PERCENT"
        ],
        "enum": [
          "FIXED_AMOUNT",
          "FIXED_PERCENT",
          "PROMPT_FOR_AMOUNT",
          "PROMT_FOR_PERCENT",
          "ITEM_BY_PERCENT"
        ]
      },
      "PromoCouponItemSelectionMethod": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "SYSTEM_AUTOMATIC_SELECTS_ALL_QUALIFIED",
          "USER_SELECT_EACH_QUALIFIED",
          "SYSTEM_SELECTS_FIRST_QUALIFIED"
        ],
        "enum": [
          "SYSTEM_AUTOMATIC_SELECTS_ALL_QUALIFIED",
          "USER_SELECT_EACH_QUALIFIED",
          "SYSTEM_SELECTS_FIRST_QUALIFIED"
        ]
      },
      "PromoDiscountableCategories": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "itemCategoryId": {
            "type": "integer",
            "description": "Category of items that can be discounted by Coupon.",
            "nullable": true
          },
          "modifierCategoryId": {
            "type": "integer",
            "description": "Category of modifiers that can be discounted by Coupon.",
            "nullable": true
          }
        }
      },
      "PromoBogoConfigData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "componentOneName": {
            "type": "string",
            "description": "Component one name.",
            "nullable": true
          },
          "componentOneCategoryId": {
            "type": "integer",
            "description": "Inform what category is limited for displayed items.",
            "nullable": true
          },
          "componentOneRequiredCount": {
            "type": "integer",
            "description": "Exact number of required items.",
            "nullable": true
          },
          "componentTwoName": {
            "type": "string",
            "description": "Component one name.",
            "nullable": true
          },
          "componentTwoCategoryId": {
            "type": "integer",
            "description": "Inform what category is limited for displayed items.",
            "nullable": true
          },
          "componentTwoRequiredCount": {
            "type": "integer",
            "description": "Exact number of required items.",
            "nullable": true
          },
          "discountableItemsCategories": {
            "description": "Promotions discountable categories.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PromoDiscountableCategories"
              }
            ]
          }
        }
      },
      "CreateSplitContextResponseData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "contextId": {
            "type": "integer",
            "description": "ID of the created split context."
          }
        }
      },
      "CreateSplitContextRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "sourceCheckIds"
        ],
        "properties": {
          "sourceCheckIds": {
            "type": "array",
            "description": "Id of the check that will be used as source for split operations.",
            "items": {
              "type": "integer"
            }
          },
          "authorizingManager": {
            "description": "Login credentials of the employee who authorizes to opening of temporary context.\nIt may be necessary if the currently logged in employee does not have access level needed.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "CommitSplitContextRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "operationCode"
        ],
        "properties": {
          "operationCode": {
            "description": "Code of the operation that should be performed.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/OperationCodeEnum"
              }
            ]
          }
        }
      },
      "OperationCodeEnum": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "INVALID",
          "COMMIT",
          "DISCARD"
        ],
        "enum": [
          "INVALID",
          "COMMIT",
          "DISCARD"
        ]
      },
      "SplitItemsRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "checkId",
          "numberOfPartsToSplit",
          "checkItemIds"
        ],
        "properties": {
          "checkId": {
            "type": "integer",
            "description": "Id of the check where split items operation happens."
          },
          "numberOfPartsToSplit": {
            "type": "integer",
            "description": "The number of parts to be split. Must be equal or higher than 2."
          },
          "checkItemIds": {
            "type": "array",
            "description": "Ids of the check items that will be splitted. When empty, all check items on the check will be splitted.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "AddSplitCheckRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "parentCheckId"
        ],
        "properties": {
          "parentCheckId": {
            "type": "integer",
            "description": "Id of the check that will be used as source to copy tax locales and applied gratuities."
          },
          "authorizingManager": {
            "description": "Login credentials of the employee who authorizes to add split check command.\nIt may be necessary if the currently logged in employee does not have access level needed.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "MoveCheckItemsSplitResponseData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sourceCheck": {
            "description": "State of the source check after the split operation.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CheckViewData"
              }
            ]
          },
          "targetCheck": {
            "description": "State of the target check after the split operation.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CheckViewData"
              }
            ]
          }
        }
      },
      "MoveCheckItemsSplitRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "sourceCheckId",
          "targetCheckId",
          "checkItems"
        ],
        "properties": {
          "sourceCheckId": {
            "type": "integer",
            "description": "Id of the check that contains the items to be moved."
          },
          "targetCheckId": {
            "type": "integer",
            "description": "Id of the check where the items will be moved."
          },
          "checkItems": {
            "type": "array",
            "description": "Id of the items and optionally seats where the items will be moved.",
            "items": {
              "$ref": "#/components/schemas/CheckItemTargetSeatPair"
            }
          },
          "authorizingManager": {
            "description": "Login credentials of the employee who authorizes to add split check command.\nIt may be necessary if the currently logged in employee does not have access level needed.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "CheckItemTargetSeatPair": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "checkItemId"
        ],
        "properties": {
          "checkItemId": {
            "type": "integer",
            "description": "Id of the check item to be moved."
          },
          "sourceSeat": {
            "type": "integer",
            "description": "Number of the source seat.",
            "format": "int32"
          },
          "targetSeat": {
            "type": "integer",
            "description": "Number of the target seat.",
            "format": "int32"
          }
        }
      },
      "AddSplitSeatResponseData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "seatNumber": {
            "type": "integer",
            "description": "Number of the seat added in the split operation."
          }
        }
      },
      "AddSplitSeatRequestData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tableId"
        ],
        "properties": {
          "tableId": {
            "type": "integer",
            "description": "Id of the table on which the seat will be added."
          },
          "seatName": {
            "type": "string",
            "description": "Custom text to name the seat with - maximum 20 characters (useful only in QS).",
            "nullable": true
          }
        }
      },
      "TableViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Table Id.",
            "nullable": true
          },
          "tableDefinitionId": {
            "type": "integer",
            "description": "Associated TableDefinition id, 0 for TABS (Type == TAB).",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the table.",
            "nullable": true
          },
          "guestCount": {
            "type": "integer",
            "description": "Guest count.",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "description": "True if the table is locked. Otherwise false.",
            "nullable": true
          },
          "isClosed": {
            "type": "boolean",
            "description": "True if the table is closed. Otherwise false.",
            "nullable": true
          },
          "owningEmployeeId": {
            "type": "integer",
            "description": "Employee who owns the table. In table service, no value is set for delivery tables.",
            "nullable": true
          },
          "checkIds": {
            "type": "array",
            "description": "Ids of the checks (both open and closed) on the table.",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          },
          "type": {
            "description": "Type of the table.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TableType2"
              }
            ]
          },
          "sourceTableId": {
            "type": "integer",
            "description": "Source Table ID in case that this one comes from the table transfer.",
            "nullable": true
          },
          "isNamed": {
            "type": "boolean",
            "description": "Indicate, if table's name is the default (from table definition) or whether it was changed (either during table creation or by rename)."
          },
          "seats": {
            "type": "array",
            "description": "List of the seats assigned to the table.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SeatViewData"
            }
          },
          "openTime": {
            "type": "string",
            "description": "Time when the table was opened. In ISO 8601 format, including timezone, e.g.: 2020-03-09T1209:45:51+05:00",
            "format": "date-time",
            "nullable": true
          },
          "closeTime": {
            "type": "string",
            "description": "Time when the table was closed. In ISO 8601 format, including timezone, e.g.: 2020-03-09T1209:45:51+05:00",
            "format": "date-time",
            "nullable": true
          },
          "firstOrderTime": {
            "type": "string",
            "description": "Time when the first order was ordered (sent to kitchen). In ISO 8601 format, including timezone, e.g.: 2020-03-09T1209:45:51+05:00",
            "format": "date-time",
            "nullable": true
          },
          "lastOrderTime": {
            "type": "string",
            "description": "Time when the last order was ordered (sent to kitchen). In ISO 8601 format, including timezone, e.g.: 2020-03-09T1209:45:51+05:00",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "TableType2": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "UNDEFINED",
          "TAB",
          "SEAT",
          "TABLE",
          "CHECK",
          "ORDER",
          "REOPENED_CHECK",
          "TEMPORARY",
          "TRANSFER_SEAT",
          "TRANSFER_CHECK"
        ],
        "enum": [
          "UNDEFINED",
          "TAB",
          "SEAT",
          "TABLE",
          "CHECK",
          "ORDER",
          "REOPENED_CHECK",
          "TEMPORARY",
          "TRANSFER_SEAT",
          "TRANSFER_CHECK"
        ]
      },
      "SeatViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "integer",
            "description": "Seat number.",
            "format": "int32"
          }
        }
      },
      "TableCreateData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tableDefinitionId": {
            "type": "integer",
            "description": "Table service only parameter. Id of the table definition used for the new table. If zero, no table definition will be used and table Type will be TAB.",
            "nullable": true
          },
          "tableName": {
            "type": "string",
            "description": "New table name. If not set and table definition is found, it will be named either after the definition's id or lookup name.",
            "maxLength": 15,
            "nullable": true
          },
          "guestCount": {
            "type": "integer",
            "description": "Number of guests that are at the new table.\nOptional, should be filled only if GuestCountBy on GET /employees/current/configuration endpoint is TABLE.",
            "format": "int32",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "description": "Set true to lock new table after adding.",
            "nullable": true
          },
          "authorizingManager": {
            "description": "Authorizing manager, required only when the employee doesn't have enough right.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeCredentialsData"
              }
            ]
          }
        }
      },
      "TableRenameData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "newTableName"
        ],
        "properties": {
          "newTableName": {
            "type": "string",
            "description": "New table name",
            "maxLength": 15,
            "minLength": 1
          }
        }
      },
      "TableOrderData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "orderModeId": {
            "type": "integer",
            "description": "ID of the order mode to be used during ordering. When not set,\nfirst active order mode (that is not refund) will be used.",
            "nullable": true
          },
          "checkItemsToOrder": {
            "type": "array",
            "description": "List of IDs of check items to be ordered.\nWhen empty, selection based order will be applied automatically.",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "TransferTableData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sourceEmployeeId": {
            "type": "integer",
            "description": "Id of the employee that owns the table being transferred."
          },
          "targetEmployeeId": {
            "type": "integer",
            "description": "Id of the employee to receive the table.\nOnce this transaction completes, the table shows up on their list of incoming tables where they can accept it."
          }
        }
      },
      "TableDefinitionViewData": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "nullable": true
          },
          "isUsed": {
            "type": "boolean",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "lookupName": {
            "type": "string",
            "nullable": true
          },
          "numberOfSeats": {
            "type": "integer",
            "nullable": true
          },
          "shape": {
            "$ref": "#/components/schemas/TableStyle"
          }
        }
      },
      "TableStyle": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "SQUARE",
          "ROUND"
        ],
        "enum": [
          "SQUARE",
          "ROUND"
        ]
      },
      "TenderDefinitionViewData": {
        "type": "object",
        "description": "TenderDefinitionData represents tender definition in Aloha",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identification of tender in Aloha POS"
          },
          "name": {
            "type": "string",
            "description": "Text description of the tender"
          },
          "imageUrl": {
            "type": "string",
            "description": "Tender button image URL address",
            "nullable": true
          },
          "positionNumber": {
            "type": "integer",
            "description": "Position on the grid of tender screen. \nGrid positioning starts from top to bottom, then next columns, then next page.",
            "nullable": true
          },
          "firstAvailableButtonPosition": {
            "type": "boolean",
            "description": "Indicates whether button should take first available position on the tender screen.\nIf FirstAvailableButtonPosition is false and PositionNumber is not specified tender won't be visible at all."
          },
          "type": {
            "description": "Tender type, for example Cash, Credit, ..",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TenderType"
              }
            ]
          },
          "askForAmount": {
            "type": "boolean",
            "description": "Indicates whether client should provide amount when applying this tender"
          },
          "askForTip": {
            "type": "boolean",
            "description": "Indicates whether client should provide tip when applying this tender"
          }
        }
      },
      "TenderType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Cash",
          "CreditCard",
          "GiftCard"
        ],
        "enum": [
          "None",
          "Cash",
          "CreditCard",
          "GiftCard"
        ]
      },
      "VoidReasonCodeViewData": {
        "type": "object",
        "description": "Pre-configured reasons for voiding or refunding",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the Void Reason Code"
          },
          "name": {
            "type": "string",
            "description": "Name of the Void Reason Code"
          },
          "isHiddenOnFoh": {
            "type": "boolean",
            "description": "Defines if the Void Reason Code is visible on UI (and users are able to use this Void Reason Code)."
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Access token.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "externalDocs": {
    "description": "NCR Aloha POS API documentation",
    "url": "#"
  }
}
